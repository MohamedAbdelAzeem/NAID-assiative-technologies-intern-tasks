
GussingGame v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000005ec  000006a0  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  000006a0  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000140  00000000  00000000  000006cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001cc1  00000000  00000000  0000080f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000837  00000000  00000000  000024d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000087f  00000000  00000000  00002d07  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000039c  00000000  00000000  00003588  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000022a  00000000  00000000  00003924  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000090e  00000000  00000000  00003b4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000100  00000000  00000000  0000445c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000005d8  000005d8  0000068c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000455c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .rodata       00000010  00800060  000005dc  00000690  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 14 .text.delay_ms 00000080  0000027c  0000027c  00000330  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.LCD_sendCommand 00000042  0000049c  0000049c  00000550  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.LCD_init 0000001e  00000584  00000584  00000638  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.LCD_displayCharacter 00000042  000004de  000004de  00000592  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.LCD_displayString 00000036  00000520  00000520  000005d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.LCD_goToRowColumn 0000002e  00000556  00000556  0000060a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.LCD_displayStringRowColumn 0000001e  000005a2  000005a2  00000656  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.LCD_clearScreen 00000008  000005d0  000005d0  00000684  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.tostring 00000072  000002fc  000002fc  000003b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.LCD_intgerToString 00000044  00000458  00000458  0000050c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .progmemx.data 00000023  000000b4  000000b4  00000168  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 25 .text.main    000000bc  000001c0  000001c0  00000274  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.__vector_10 0000004e  0000036e  0000036e  00000422  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.__vector_4 0000004e  000003bc  000003bc  00000470  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.__vector_7 0000004e  0000040a  0000040a  000004be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.Timer_start 000000e8  000000d8  000000d8  0000018c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.Timer1A_CTC_flag 00000010  000005c0  000005c0  00000674  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .bss.g_callBackPtrTimer2CTC 00000002  00800070  00800070  000006a0  2**0
                  ALLOC
 32 .bss.g_callBackPtrTimer1COMPA 00000002  00800072  00800072  000006a0  2**0
                  ALLOC
 33 .bss.g_callBackPtrTimer0CTC 00000002  00800074  00800074  000006a0  2**0
                  ALLOC

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 30 00 	jmp	0x60	; 0x60 <__ctors_end>
   4:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <__bad_interrupt>
   8:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <__bad_interrupt>
   c:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <__bad_interrupt>
  10:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__vector_4>
  14:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <__bad_interrupt>
  18:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <__bad_interrupt>
  1c:	0c 94 05 02 	jmp	0x40a	; 0x40a <__vector_7>
  20:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <__bad_interrupt>
  24:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <__bad_interrupt>
  28:	0c 94 b7 01 	jmp	0x36e	; 0x36e <__vector_10>
  2c:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <__bad_interrupt>
  30:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <__bad_interrupt>
  34:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <__bad_interrupt>
  38:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <__bad_interrupt>
  3c:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <__bad_interrupt>
  40:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <__bad_interrupt>
  44:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <__bad_interrupt>
  48:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <__bad_interrupt>
  4c:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <__bad_interrupt>
  50:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 70       	andi	r16, 0x00	; 0
  58:	00 05       	cpc	r16, r0
  5a:	dc 00       	.word	0x00dc	; ????
  5c:	70 00       	.word	0x0070	; ????
  5e:	76 80       	ldd	r7, Z+6	; 0x06

00000060 <__ctors_end>:
  60:	11 24       	eor	r1, r1
  62:	1f be       	out	0x3f, r1	; 63
  64:	cf e5       	ldi	r28, 0x5F	; 95
  66:	d8 e0       	ldi	r29, 0x08	; 8
  68:	de bf       	out	0x3e, r29	; 62
  6a:	cd bf       	out	0x3d, r28	; 61

0000006c <__do_copy_data>:
  6c:	e4 e5       	ldi	r30, 0x54	; 84
  6e:	f0 e0       	ldi	r31, 0x00	; 0
  70:	40 e0       	ldi	r20, 0x00	; 0
  72:	17 c0       	rjmp	.+46     	; 0xa2 <__do_clear_bss+0x8>
  74:	b5 91       	lpm	r27, Z+
  76:	a5 91       	lpm	r26, Z+
  78:	35 91       	lpm	r19, Z+
  7a:	25 91       	lpm	r18, Z+
  7c:	05 91       	lpm	r16, Z+
  7e:	07 fd       	sbrc	r16, 7
  80:	0c c0       	rjmp	.+24     	; 0x9a <__do_clear_bss>
  82:	95 91       	lpm	r25, Z+
  84:	85 91       	lpm	r24, Z+
  86:	ef 01       	movw	r28, r30
  88:	f9 2f       	mov	r31, r25
  8a:	e8 2f       	mov	r30, r24
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	a2 17       	cp	r26, r18
  92:	b3 07       	cpc	r27, r19
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0x20>
  96:	fe 01       	movw	r30, r28
  98:	04 c0       	rjmp	.+8      	; 0xa2 <__do_clear_bss+0x8>

0000009a <__do_clear_bss>:
  9a:	1d 92       	st	X+, r1
  9c:	a2 17       	cp	r26, r18
  9e:	b3 07       	cpc	r27, r19
  a0:	e1 f7       	brne	.-8      	; 0x9a <__do_clear_bss>
  a2:	e0 36       	cpi	r30, 0x60	; 96
  a4:	f4 07       	cpc	r31, r20
  a6:	31 f7       	brne	.-52     	; 0x74 <__do_copy_data+0x8>
  a8:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <main>
  ac:	0c 94 58 00 	jmp	0xb0	; 0xb0 <_exit>

000000b0 <_exit>:
  b0:	f8 94       	cli

000000b2 <__stop_program>:
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <__stop_program>

Disassembly of section .text:

000005d8 <__bad_interrupt>:
 5d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.delay_ms:

0000027c <delay_ms>:
/* if you want delay more than 250us use delay_ms  */


/* Enter delay in Milliseconds */
void delay_ms(uint16_t delay)
{
 27c:	ef 92       	push	r14
 27e:	ff 92       	push	r15
 280:	0f 93       	push	r16
 282:	1f 93       	push	r17
 284:	cf 93       	push	r28
 286:	df 93       	push	r29
 288:	cd b7       	in	r28, 0x3d	; 61
 28a:	de b7       	in	r29, 0x3e	; 62
 28c:	28 97       	sbiw	r28, 0x08	; 8
 28e:	0f b6       	in	r0, 0x3f	; 63
 290:	f8 94       	cli
 292:	de bf       	out	0x3e, r29	; 62
 294:	0f be       	out	0x3f, r0	; 63
 296:	cd bf       	out	0x3d, r28	; 61
 298:	7c 01       	movw	r14, r24
	uint16_t counter=  0;
	/* configure timer to count to  100usec  */
	St_Config_Timer_t timer0_config1 = {TIMER1, COMPARE_MODE_toggel , INTERNAL_CLK_PRESCALAR0_1 , DEFAULT_INITIAL_VALUE,100,CHANNEL_A};
 29a:	88 e0       	ldi	r24, 0x08	; 8
 29c:	e0 e6       	ldi	r30, 0x60	; 96
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	de 01       	movw	r26, r28
 2a2:	11 96       	adiw	r26, 0x01	; 1
 2a4:	01 90       	ld	r0, Z+
 2a6:	0d 92       	st	X+, r0
 2a8:	8a 95       	dec	r24
 2aa:	e1 f7       	brne	.-8      	; 0x2a4 <delay_ms+0x28>

	Timer_start(&timer0_config1);
 2ac:	ce 01       	movw	r24, r28
 2ae:	01 96       	adiw	r24, 0x01	; 1
 2b0:	0e 94 6c 00 	call	0xd8	; 0xd8 <Timer_start>


/* Enter delay in Milliseconds */
void delay_ms(uint16_t delay)
{
	uint16_t counter=  0;
 2b4:	00 e0       	ldi	r16, 0x00	; 0
 2b6:	10 e0       	ldi	r17, 0x00	; 0
	St_Config_Timer_t timer0_config1 = {TIMER1, COMPARE_MODE_toggel , INTERNAL_CLK_PRESCALAR0_1 , DEFAULT_INITIAL_VALUE,100,CHANNEL_A};

	Timer_start(&timer0_config1);
	 while(1)
		{
			if(Timer1A_CTC_flag())
 2b8:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <Timer1A_CTC_flag>
 2bc:	88 23       	and	r24, r24
 2be:	e1 f3       	breq	.-8      	; 0x2b8 <delay_ms+0x3c>
			{
				 counter++;
 2c0:	0f 5f       	subi	r16, 0xFF	; 255
 2c2:	1f 4f       	sbci	r17, 0xFF	; 255
				if(counter == delay * 10  )
 2c4:	c7 01       	movw	r24, r14
 2c6:	88 0f       	add	r24, r24
 2c8:	99 1f       	adc	r25, r25
 2ca:	88 0f       	add	r24, r24
 2cc:	99 1f       	adc	r25, r25
 2ce:	88 0f       	add	r24, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	97 01       	movw	r18, r14
 2d4:	22 0f       	add	r18, r18
 2d6:	33 1f       	adc	r19, r19
 2d8:	82 0f       	add	r24, r18
 2da:	93 1f       	adc	r25, r19
 2dc:	08 17       	cp	r16, r24
 2de:	19 07       	cpc	r17, r25
 2e0:	59 f7       	brne	.-42     	; 0x2b8 <delay_ms+0x3c>
				}
		
			}
		
		}
}
 2e2:	28 96       	adiw	r28, 0x08	; 8
 2e4:	0f b6       	in	r0, 0x3f	; 63
 2e6:	f8 94       	cli
 2e8:	de bf       	out	0x3e, r29	; 62
 2ea:	0f be       	out	0x3f, r0	; 63
 2ec:	cd bf       	out	0x3d, r28	; 61
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	1f 91       	pop	r17
 2f4:	0f 91       	pop	r16
 2f6:	ff 90       	pop	r15
 2f8:	ef 90       	pop	r14
 2fa:	08 95       	ret

Disassembly of section .text.LCD_sendCommand:

0000049c <LCD_sendCommand>:
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
}

void LCD_sendCommand(uint8_t command)
{
 49c:	cf 93       	push	r28
 49e:	c8 2f       	mov	r28, r24
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
 4a0:	82 b3       	in	r24, 0x12	; 18
 4a2:	8f 7e       	andi	r24, 0xEF	; 239
 4a4:	82 bb       	out	0x12, r24	; 18
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
 4a6:	82 b3       	in	r24, 0x12	; 18
 4a8:	8f 7d       	andi	r24, 0xDF	; 223
 4aa:	82 bb       	out	0x12, r24	; 18
	delay_ms(1); /* delay for processing Tas = 50ns */
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	0e 94 3e 01 	call	0x27c	; 0x27c <delay_ms>
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
 4b4:	82 b3       	in	r24, 0x12	; 18
 4b6:	80 64       	ori	r24, 0x40	; 64
 4b8:	82 bb       	out	0x12, r24	; 18
	delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	0e 94 3e 01 	call	0x27c	; 0x27c <delay_ms>

	delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	delay_ms(1); /* delay for processing Th = 13ns */
#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
 4c2:	c5 bb       	out	0x15, r28	; 21
	delay_ms(1); /* delay for processing Tdsw = 100ns */
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	0e 94 3e 01 	call	0x27c	; 0x27c <delay_ms>
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
 4cc:	82 b3       	in	r24, 0x12	; 18
 4ce:	8f 7b       	andi	r24, 0xBF	; 191
 4d0:	82 bb       	out	0x12, r24	; 18
	delay_ms(1); /* delay for processing Th = 13ns */
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	0e 94 3e 01 	call	0x27c	; 0x27c <delay_ms>
#endif
}
 4da:	cf 91       	pop	r28
 4dc:	08 95       	ret

Disassembly of section .text.LCD_init:

00000584 <LCD_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
 584:	81 b3       	in	r24, 0x11	; 17
 586:	80 67       	ori	r24, 0x70	; 112
 588:	81 bb       	out	0x11, r24	; 17
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
		#endif
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */
 58a:	8f ef       	ldi	r24, 0xFF	; 255
 58c:	84 bb       	out	0x14, r24	; 20
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
 58e:	88 e3       	ldi	r24, 0x38	; 56
 590:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_sendCommand>
	#endif

	LCD_sendCommand(CURSOR_OFF); /* cursor off */
 594:	8c e0       	ldi	r24, 0x0C	; 12
 596:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_sendCommand>
 5a0:	08 95       	ret

Disassembly of section .text.LCD_displayCharacter:

000004de <LCD_displayCharacter>:
	delay_ms(1); /* delay for processing Th = 13ns */
#endif
}

void LCD_displayCharacter(uint8_t data)
{
 4de:	cf 93       	push	r28
 4e0:	c8 2f       	mov	r28, r24
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
 4e2:	82 b3       	in	r24, 0x12	; 18
 4e4:	80 61       	ori	r24, 0x10	; 16
 4e6:	82 bb       	out	0x12, r24	; 18
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
 4e8:	82 b3       	in	r24, 0x12	; 18
 4ea:	8f 7d       	andi	r24, 0xDF	; 223
 4ec:	82 bb       	out	0x12, r24	; 18
	delay_ms(1); /* delay for processing Tas = 50ns */
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	0e 94 3e 01 	call	0x27c	; 0x27c <delay_ms>
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
 4f6:	82 b3       	in	r24, 0x12	; 18
 4f8:	80 64       	ori	r24, 0x40	; 64
 4fa:	82 bb       	out	0x12, r24	; 18
	delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	0e 94 3e 01 	call	0x27c	; 0x27c <delay_ms>

	delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	delay_ms(1); /* delay for processing Th = 13ns */
#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT = data; /* out the required command to the data bus D0 --> D7 */
 504:	c5 bb       	out	0x15, r28	; 21
	delay_ms(1); /* delay for processing Tdsw = 100ns */
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	0e 94 3e 01 	call	0x27c	; 0x27c <delay_ms>
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
 50e:	82 b3       	in	r24, 0x12	; 18
 510:	8f 7b       	andi	r24, 0xBF	; 191
 512:	82 bb       	out	0x12, r24	; 18
	delay_ms(1); /* delay for processing Th = 13ns */
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	0e 94 3e 01 	call	0x27c	; 0x27c <delay_ms>
#endif
}
 51c:	cf 91       	pop	r28
 51e:	08 95       	ret

Disassembly of section .text.LCD_displayString:

00000520 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
 520:	cf 92       	push	r12
 522:	df 92       	push	r13
 524:	ef 92       	push	r14
 526:	cf 93       	push	r28
 528:	6b 01       	movw	r12, r22
 52a:	e8 2e       	mov	r14, r24
	uint8_t i = 0;
 52c:	c0 e0       	ldi	r28, 0x00	; 0
	while(Str[i] != '\0')
 52e:	03 c0       	rjmp	.+6      	; 0x536 <LCD_displayString+0x16>
	{
		LCD_displayCharacter(Str[i]);
 530:	0e 94 6f 02 	call	0x4de	; 0x4de <LCD_displayCharacter>
		i++;
 534:	cf 5f       	subi	r28, 0xFF	; 255
}

void LCD_displayString(const char *Str)
{
	uint8_t i = 0;
	while(Str[i] != '\0')
 536:	ae 2d       	mov	r26, r14
 538:	c6 01       	movw	r24, r12
 53a:	8c 0f       	add	r24, r28
 53c:	91 1d       	adc	r25, r1
 53e:	a1 1d       	adc	r26, r1
 540:	fc 01       	movw	r30, r24
 542:	84 91       	lpm	r24, Z
 544:	a7 fd       	sbrc	r26, 7
 546:	80 81       	ld	r24, Z
 548:	81 11       	cpse	r24, r1
 54a:	f2 cf       	rjmp	.-28     	; 0x530 <LCD_displayString+0x10>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
 54c:	cf 91       	pop	r28
 54e:	ef 90       	pop	r14
 550:	df 90       	pop	r13
 552:	cf 90       	pop	r12
 554:	08 95       	ret

Disassembly of section .text.LCD_goToRowColumn:

00000556 <LCD_goToRowColumn>:
void LCD_goToRowColumn(uint8_t row,uint8_t col)
	{
	uint8_t Address;

	/* first of all calculate the required address */
	switch(row)
 556:	81 30       	cpi	r24, 0x01	; 1
 558:	31 f0       	breq	.+12     	; 0x566 <LCD_goToRowColumn+0x10>
 55a:	70 f0       	brcs	.+28     	; 0x578 <LCD_goToRowColumn+0x22>
 55c:	82 30       	cpi	r24, 0x02	; 2
 55e:	31 f0       	breq	.+12     	; 0x56c <LCD_goToRowColumn+0x16>
 560:	83 30       	cpi	r24, 0x03	; 3
 562:	39 f0       	breq	.+14     	; 0x572 <LCD_goToRowColumn+0x1c>
 564:	0a c0       	rjmp	.+20     	; 0x57a <LCD_goToRowColumn+0x24>
	{
		case 0:
				Address=col;
				break;
		case 1:
				Address=col+0x40;
 566:	90 e4       	ldi	r25, 0x40	; 64
 568:	96 0f       	add	r25, r22
				break;
 56a:	07 c0       	rjmp	.+14     	; 0x57a <LCD_goToRowColumn+0x24>
		case 2:
				Address=col+0x10;
 56c:	90 e1       	ldi	r25, 0x10	; 16
 56e:	96 0f       	add	r25, r22
				break;
 570:	04 c0       	rjmp	.+8      	; 0x57a <LCD_goToRowColumn+0x24>
		case 3:
				Address=col+0x50;
 572:	90 e5       	ldi	r25, 0x50	; 80
 574:	96 0f       	add	r25, r22
				break;
 576:	01 c0       	rjmp	.+2      	; 0x57a <LCD_goToRowColumn+0x24>

	/* first of all calculate the required address */
	switch(row)
	{
		case 0:
				Address=col;
 578:	96 2f       	mov	r25, r22
				Address=col+0x50;
				break;
	}
	/* to write to a specific address in the LCD
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION);
 57a:	89 2f       	mov	r24, r25
 57c:	80 68       	ori	r24, 0x80	; 128
 57e:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_sendCommand>
 582:	08 95       	ret

Disassembly of section .text.LCD_displayStringRowColumn:

000005a2 <LCD_displayStringRowColumn>:
}

void LCD_displayStringRowColumn(uint8_t row,uint8_t col,const char *Str)
{
 5a2:	cf 92       	push	r12
 5a4:	df 92       	push	r13
 5a6:	ef 92       	push	r14
 5a8:	69 01       	movw	r12, r18
 5aa:	e4 2e       	mov	r14, r20
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
 5ac:	0e 94 ab 02 	call	0x556	; 0x556 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
 5b0:	8e 2d       	mov	r24, r14
 5b2:	b6 01       	movw	r22, r12
 5b4:	0e 94 90 02 	call	0x520	; 0x520 <LCD_displayString>
}
 5b8:	ef 90       	pop	r14
 5ba:	df 90       	pop	r13
 5bc:	cf 90       	pop	r12
 5be:	08 95       	ret

Disassembly of section .text.LCD_clearScreen:

000005d0 <LCD_clearScreen>:
   LCD_displayString(buff);
}

void LCD_clearScreen(void)
{
	LCD_sendCommand(CLEAR_COMMAND); //clear display
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_sendCommand>
 5d6:	08 95       	ret

Disassembly of section .text.tostring:

000002fc <tostring>:
}


void tostring(uint8_t str[], uint8_t number)
{
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	dc 01       	movw	r26, r24
	uint8_t iterator;
	uint8_t StringLength = 0 ;
	uint8_t IntegerNumber = number ;
 302:	96 2f       	mov	r25, r22


void tostring(uint8_t str[], uint8_t number)
{
	uint8_t iterator;
	uint8_t StringLength = 0 ;
 304:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t IntegerNumber = number ;
	uint8_t remainder = 0;
	/* calculating length of the number */
	while(IntegerNumber != 0 )
 306:	08 c0       	rjmp	.+16     	; 0x318 <tostring+0x1c>
	{
		StringLength++;
 308:	3f 5f       	subi	r19, 0xFF	; 255
		IntegerNumber /= 10;
 30a:	8d ec       	ldi	r24, 0xCD	; 205
 30c:	98 9f       	mul	r25, r24
 30e:	91 2d       	mov	r25, r1
 310:	11 24       	eor	r1, r1
 312:	96 95       	lsr	r25
 314:	96 95       	lsr	r25
 316:	96 95       	lsr	r25
	uint8_t iterator;
	uint8_t StringLength = 0 ;
	uint8_t IntegerNumber = number ;
	uint8_t remainder = 0;
	/* calculating length of the number */
	while(IntegerNumber != 0 )
 318:	91 11       	cpse	r25, r1
 31a:	f6 cf       	rjmp	.-20     	; 0x308 <tostring+0xc>
 31c:	40 e0       	ldi	r20, 0x00	; 0
 31e:	1f c0       	rjmp	.+62     	; 0x35e <tostring+0x62>
	}
	
	IntegerNumber = number;
	for(iterator = 0; iterator < StringLength; iterator++)
	{
		remainder =  IntegerNumber % 10;
 320:	2d ec       	ldi	r18, 0xCD	; 205
 322:	62 9f       	mul	r22, r18
 324:	21 2d       	mov	r18, r1
 326:	11 24       	eor	r1, r1
 328:	92 2f       	mov	r25, r18
 32a:	96 95       	lsr	r25
 32c:	96 95       	lsr	r25
 32e:	96 95       	lsr	r25
 330:	99 0f       	add	r25, r25
 332:	89 2f       	mov	r24, r25
 334:	88 0f       	add	r24, r24
 336:	88 0f       	add	r24, r24
 338:	98 0f       	add	r25, r24
 33a:	69 1b       	sub	r22, r25
 33c:	96 2f       	mov	r25, r22
		IntegerNumber = IntegerNumber /10;
 33e:	62 2f       	mov	r22, r18
 340:	66 95       	lsr	r22
 342:	66 95       	lsr	r22
 344:	66 95       	lsr	r22
		str[StringLength-(iterator+1)] = remainder + '0';   /* + '0' to convert number digit to character */
 346:	c4 2f       	mov	r28, r20
 348:	d0 e0       	ldi	r29, 0x00	; 0
 34a:	21 96       	adiw	r28, 0x01	; 1
 34c:	e3 2f       	mov	r30, r19
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	ec 1b       	sub	r30, r28
 352:	fd 0b       	sbc	r31, r29
 354:	ea 0f       	add	r30, r26
 356:	fb 1f       	adc	r31, r27
 358:	90 5d       	subi	r25, 0xD0	; 208
 35a:	90 83       	st	Z, r25
		StringLength++;
		IntegerNumber /= 10;
	}
	
	IntegerNumber = number;
	for(iterator = 0; iterator < StringLength; iterator++)
 35c:	4f 5f       	subi	r20, 0xFF	; 255
 35e:	43 17       	cp	r20, r19
 360:	f8 f2       	brcs	.-66     	; 0x320 <tostring+0x24>
	{
		remainder =  IntegerNumber % 10;
		IntegerNumber = IntegerNumber /10;
		str[StringLength-(iterator+1)] = remainder + '0';   /* + '0' to convert number digit to character */
	}
	str[StringLength] = '\0';
 362:	a3 0f       	add	r26, r19
 364:	b1 1d       	adc	r27, r1
 366:	1c 92       	st	X, r1
 368:	df 91       	pop	r29
 36a:	cf 91       	pop	r28
 36c:	08 95       	ret

Disassembly of section .text.LCD_intgerToString:

00000458 <LCD_intgerToString>:
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
	LCD_displayString(Str); /* display the string */
}

void LCD_intgerToString(int data)
{
 458:	0f 93       	push	r16
 45a:	1f 93       	push	r17
 45c:	cf 93       	push	r28
 45e:	df 93       	push	r29
 460:	cd b7       	in	r28, 0x3d	; 61
 462:	de b7       	in	r29, 0x3e	; 62
 464:	60 97       	sbiw	r28, 0x10	; 16
 466:	0f b6       	in	r0, 0x3f	; 63
 468:	f8 94       	cli
 46a:	de bf       	out	0x3e, r29	; 62
 46c:	0f be       	out	0x3f, r0	; 63
 46e:	cd bf       	out	0x3d, r28	; 61
   char buff[16]; /* String to hold the ascii result */
   tostring(buff,data); /* 10 for decimal */
 470:	68 2f       	mov	r22, r24
 472:	8e 01       	movw	r16, r28
 474:	0f 5f       	subi	r16, 0xFF	; 255
 476:	1f 4f       	sbci	r17, 0xFF	; 255
 478:	c8 01       	movw	r24, r16
 47a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <tostring>
   LCD_displayString(buff);
 47e:	b8 01       	movw	r22, r16
 480:	80 e8       	ldi	r24, 0x80	; 128
 482:	0e 94 90 02 	call	0x520	; 0x520 <LCD_displayString>
}
 486:	60 96       	adiw	r28, 0x10	; 16
 488:	0f b6       	in	r0, 0x3f	; 63
 48a:	f8 94       	cli
 48c:	de bf       	out	0x3e, r29	; 62
 48e:	0f be       	out	0x3f, r0	; 63
 490:	cd bf       	out	0x3d, r28	; 61
 492:	df 91       	pop	r29
 494:	cf 91       	pop	r28
 496:	1f 91       	pop	r17
 498:	0f 91       	pop	r16
 49a:	08 95       	ret

Disassembly of section .text.main:

000001c0 <main>:
#include "stdlib.h"



int main(void)
{
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	cd b7       	in	r28, 0x3d	; 61
 1c6:	de b7       	in	r29, 0x3e	; 62
 1c8:	64 97       	sbiw	r28, 0x14	; 20
 1ca:	0f b6       	in	r0, 0x3f	; 63
 1cc:	f8 94       	cli
 1ce:	de bf       	out	0x3e, r29	; 62
 1d0:	0f be       	out	0x3f, r0	; 63
 1d2:	cd bf       	out	0x3d, r28	; 61
	LCD_init();
 1d4:	0e 94 c2 02 	call	0x584	; 0x584 <LCD_init>
	

	 DDRA = 0x00;
 1d8:	1a ba       	out	0x1a, r1	; 26
	 PORTA = 0xFF;
 1da:	8f ef       	ldi	r24, 0xFF	; 255
 1dc:	8b bb       	out	0x1b, r24	; 27
	 
	uint8_t BUFF[20]= {};
 1de:	ce 01       	movw	r24, r28
 1e0:	01 96       	adiw	r24, 0x01	; 1
 1e2:	24 e1       	ldi	r18, 0x14	; 20
 1e4:	fc 01       	movw	r30, r24
 1e6:	11 92       	st	Z+, r1
 1e8:	2a 95       	dec	r18
 1ea:	e9 f7       	brne	.-6      	; 0x1e6 <main+0x26>

	// uint8_t randomNumber =rand() % 15 ;
	  uint8_t randomNumber = 4;
	 uint8_t KeyPressCounter = 0 ;
	 uint16_t TimeOutCounter = 0;
	 tostring(BUFF,randomNumber);
 1ec:	64 e0       	ldi	r22, 0x04	; 4
 1ee:	0e 94 7e 01 	call	0x2fc	; 0x2fc <tostring>
	uint8_t BUFF[20]= {};

	// uint8_t randomNumber =rand() % 15 ;
	  uint8_t randomNumber = 4;
	 uint8_t KeyPressCounter = 0 ;
	 uint16_t TimeOutCounter = 0;
 1f2:	00 e0       	ldi	r16, 0x00	; 0
 1f4:	10 e0       	ldi	r17, 0x00	; 0
	 
	uint8_t BUFF[20]= {};

	// uint8_t randomNumber =rand() % 15 ;
	  uint8_t randomNumber = 4;
	 uint8_t KeyPressCounter = 0 ;
 1f6:	f1 2c       	mov	r15, r1
	 uint16_t TimeOutCounter = 0;
	 tostring(BUFF,randomNumber);

    while(1)
    {
	    LCD_displayStringRowColumn(0,0,"Guess Number...");
 1f8:	24 eb       	ldi	r18, 0xB4	; 180
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	40 e0       	ldi	r20, 0x00	; 0
 1fe:	60 e0       	ldi	r22, 0x00	; 0
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <LCD_displayStringRowColumn>
		 	
		if(BIT_IS_CLEAR(PINA,0))
 206:	c8 99       	sbic	0x19, 0	; 25
 208:	22 c0       	rjmp	.+68     	; 0x24e <main+0x8e>
		{
			KeyPressCounter++;
 20a:	f3 94       	inc	r15
			if(KeyPressCounter == randomNumber)
 20c:	f4 e0       	ldi	r31, 0x04	; 4
 20e:	ff 12       	cpse	r15, r31
 210:	18 c0       	rjmp	.+48     	; 0x242 <main+0x82>
			{
				LCD_clearScreen();
 212:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LCD_clearScreen>
				LCD_displayStringRowColumn(0,0,"Winner...");
 216:	24 ec       	ldi	r18, 0xC4	; 196
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	40 e0       	ldi	r20, 0x00	; 0
 21c:	60 e0       	ldi	r22, 0x00	; 0
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <LCD_displayStringRowColumn>
				LCD_intgerToString(randomNumber);
 224:	84 e0       	ldi	r24, 0x04	; 4
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_intgerToString>
				LCD_displayStringRowColumn(1,0,BUFF);
 22c:	9e 01       	movw	r18, r28
 22e:	2f 5f       	subi	r18, 0xFF	; 255
 230:	3f 4f       	sbci	r19, 0xFF	; 255
 232:	40 e8       	ldi	r20, 0x80	; 128
 234:	60 e0       	ldi	r22, 0x00	; 0
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <LCD_displayStringRowColumn>
			
				KeyPressCounter= 0;
				TimeOutCounter= 0;
 23c:	00 e0       	ldi	r16, 0x00	; 0
 23e:	10 e0       	ldi	r17, 0x00	; 0
				LCD_clearScreen();
				LCD_displayStringRowColumn(0,0,"Winner...");
				LCD_intgerToString(randomNumber);
				LCD_displayStringRowColumn(1,0,BUFF);
			
				KeyPressCounter= 0;
 240:	f1 2c       	mov	r15, r1
				TimeOutCounter= 0;
			}
			delay_ms(700);
 242:	8c eb       	ldi	r24, 0xBC	; 188
 244:	92 e0       	ldi	r25, 0x02	; 2
 246:	0e 94 3e 01 	call	0x27c	; 0x27c <delay_ms>
			LCD_clearScreen();
 24a:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LCD_clearScreen>
		}
		TimeOutCounter++;
 24e:	0f 5f       	subi	r16, 0xFF	; 255
 250:	1f 4f       	sbci	r17, 0xFF	; 255
		if(TimeOutCounter == 100 )
 252:	04 36       	cpi	r16, 0x64	; 100
 254:	11 05       	cpc	r17, r1
 256:	81 f6       	brne	.-96     	; 0x1f8 <main+0x38>
		{
			LCD_clearScreen();
 258:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"Loser...");
 25c:	2e ec       	ldi	r18, 0xCE	; 206
 25e:	30 e0       	ldi	r19, 0x00	; 0
 260:	40 e0       	ldi	r20, 0x00	; 0
 262:	60 e0       	ldi	r22, 0x00	; 0
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <LCD_displayStringRowColumn>
			delay_ms(2000);
 26a:	80 ed       	ldi	r24, 0xD0	; 208
 26c:	97 e0       	ldi	r25, 0x07	; 7
 26e:	0e 94 3e 01 	call	0x27c	; 0x27c <delay_ms>
			LCD_clearScreen();
 272:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LCD_clearScreen>
			TimeOutCounter=0;
 276:	00 e0       	ldi	r16, 0x00	; 0
 278:	10 e0       	ldi	r17, 0x00	; 0
 27a:	be cf       	rjmp	.-132    	; 0x1f8 <main+0x38>

Disassembly of section .text.__vector_10:

0000036e <__vector_10>:
uint8_t Timer2_OV_flag()
{
	while(BIT_IS_CLEAR(TIFR,TOV2));
	SET_BIT(TIFR,TOV2);
	return 1;
}
 36e:	1f 92       	push	r1
 370:	0f 92       	push	r0
 372:	0f b6       	in	r0, 0x3f	; 63
 374:	0f 92       	push	r0
 376:	11 24       	eor	r1, r1
 378:	2f 93       	push	r18
 37a:	3f 93       	push	r19
 37c:	4f 93       	push	r20
 37e:	5f 93       	push	r21
 380:	6f 93       	push	r22
 382:	7f 93       	push	r23
 384:	8f 93       	push	r24
 386:	9f 93       	push	r25
 388:	af 93       	push	r26
 38a:	bf 93       	push	r27
 38c:	ef 93       	push	r30
 38e:	ff 93       	push	r31
 390:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <g_callBackPtrTimer0CTC>
 394:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <g_callBackPtrTimer0CTC+0x1>
 398:	09 95       	icall
 39a:	ff 91       	pop	r31
 39c:	ef 91       	pop	r30
 39e:	bf 91       	pop	r27
 3a0:	af 91       	pop	r26
 3a2:	9f 91       	pop	r25
 3a4:	8f 91       	pop	r24
 3a6:	7f 91       	pop	r23
 3a8:	6f 91       	pop	r22
 3aa:	5f 91       	pop	r21
 3ac:	4f 91       	pop	r20
 3ae:	3f 91       	pop	r19
 3b0:	2f 91       	pop	r18
 3b2:	0f 90       	pop	r0
 3b4:	0f be       	out	0x3f, r0	; 63
 3b6:	0f 90       	pop	r0
 3b8:	1f 90       	pop	r1
 3ba:	18 95       	reti

Disassembly of section .text.__vector_4:

000003bc <__vector_4>:
 3bc:	1f 92       	push	r1
 3be:	0f 92       	push	r0
 3c0:	0f b6       	in	r0, 0x3f	; 63
 3c2:	0f 92       	push	r0
 3c4:	11 24       	eor	r1, r1
 3c6:	2f 93       	push	r18
 3c8:	3f 93       	push	r19
 3ca:	4f 93       	push	r20
 3cc:	5f 93       	push	r21
 3ce:	6f 93       	push	r22
 3d0:	7f 93       	push	r23
 3d2:	8f 93       	push	r24
 3d4:	9f 93       	push	r25
 3d6:	af 93       	push	r26
 3d8:	bf 93       	push	r27
 3da:	ef 93       	push	r30
 3dc:	ff 93       	push	r31
 3de:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <g_callBackPtrTimer2CTC>
 3e2:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <g_callBackPtrTimer2CTC+0x1>
 3e6:	09 95       	icall
 3e8:	ff 91       	pop	r31
 3ea:	ef 91       	pop	r30
 3ec:	bf 91       	pop	r27
 3ee:	af 91       	pop	r26
 3f0:	9f 91       	pop	r25
 3f2:	8f 91       	pop	r24
 3f4:	7f 91       	pop	r23
 3f6:	6f 91       	pop	r22
 3f8:	5f 91       	pop	r21
 3fa:	4f 91       	pop	r20
 3fc:	3f 91       	pop	r19
 3fe:	2f 91       	pop	r18
 400:	0f 90       	pop	r0
 402:	0f be       	out	0x3f, r0	; 63
 404:	0f 90       	pop	r0
 406:	1f 90       	pop	r1
 408:	18 95       	reti

Disassembly of section .text.__vector_7:

0000040a <__vector_7>:
 40a:	1f 92       	push	r1
 40c:	0f 92       	push	r0
 40e:	0f b6       	in	r0, 0x3f	; 63
 410:	0f 92       	push	r0
 412:	11 24       	eor	r1, r1
 414:	2f 93       	push	r18
 416:	3f 93       	push	r19
 418:	4f 93       	push	r20
 41a:	5f 93       	push	r21
 41c:	6f 93       	push	r22
 41e:	7f 93       	push	r23
 420:	8f 93       	push	r24
 422:	9f 93       	push	r25
 424:	af 93       	push	r26
 426:	bf 93       	push	r27
 428:	ef 93       	push	r30
 42a:	ff 93       	push	r31
 42c:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <g_callBackPtrTimer1COMPA>
 430:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <g_callBackPtrTimer1COMPA+0x1>
 434:	09 95       	icall
 436:	ff 91       	pop	r31
 438:	ef 91       	pop	r30
 43a:	bf 91       	pop	r27
 43c:	af 91       	pop	r26
 43e:	9f 91       	pop	r25
 440:	8f 91       	pop	r24
 442:	7f 91       	pop	r23
 444:	6f 91       	pop	r22
 446:	5f 91       	pop	r21
 448:	4f 91       	pop	r20
 44a:	3f 91       	pop	r19
 44c:	2f 91       	pop	r18
 44e:	0f 90       	pop	r0
 450:	0f be       	out	0x3f, r0	; 63
 452:	0f 90       	pop	r0
 454:	1f 90       	pop	r1
 456:	18 95       	reti

Disassembly of section .text.Timer_start:

000000d8 <Timer_start>:
  d8:	fc 01       	movw	r30, r24
  da:	80 81       	ld	r24, Z
  dc:	81 30       	cpi	r24, 0x01	; 1
  de:	c1 f1       	breq	.+112    	; 0x150 <Timer_start+0x78>
  e0:	18 f0       	brcs	.+6      	; 0xe8 <Timer_start+0x10>
  e2:	82 30       	cpi	r24, 0x02	; 2
  e4:	e1 f0       	breq	.+56     	; 0x11e <Timer_start+0x46>
  e6:	08 95       	ret
  e8:	93 b7       	in	r25, 0x33	; 51
  ea:	81 81       	ldd	r24, Z+1	; 0x01
  ec:	89 2b       	or	r24, r25
  ee:	83 bf       	out	0x33, r24	; 51
  f0:	93 b7       	in	r25, 0x33	; 51
  f2:	82 81       	ldd	r24, Z+2	; 0x02
  f4:	87 70       	andi	r24, 0x07	; 7
  f6:	89 2b       	or	r24, r25
  f8:	83 bf       	out	0x33, r24	; 51
  fa:	83 81       	ldd	r24, Z+3	; 0x03
  fc:	82 bf       	out	0x32, r24	; 50
  fe:	85 81       	ldd	r24, Z+5	; 0x05
 100:	8c bf       	out	0x3c, r24	; 60
 102:	8f b7       	in	r24, 0x3f	; 63
 104:	80 68       	ori	r24, 0x80	; 128
 106:	8f bf       	out	0x3f, r24	; 63
 108:	03 b6       	in	r0, 0x33	; 51
 10a:	03 fe       	sbrs	r0, 3
 10c:	04 c0       	rjmp	.+8      	; 0x116 <Timer_start+0x3e>
 10e:	89 b7       	in	r24, 0x39	; 57
 110:	82 60       	ori	r24, 0x02	; 2
 112:	89 bf       	out	0x39, r24	; 57
 114:	08 95       	ret
 116:	89 b7       	in	r24, 0x39	; 57
 118:	81 60       	ori	r24, 0x01	; 1
 11a:	89 bf       	out	0x39, r24	; 57
 11c:	08 95       	ret
 11e:	81 81       	ldd	r24, Z+1	; 0x01
 120:	85 bd       	out	0x25, r24	; 37
 122:	95 b5       	in	r25, 0x25	; 37
 124:	82 81       	ldd	r24, Z+2	; 0x02
 126:	87 70       	andi	r24, 0x07	; 7
 128:	89 2b       	or	r24, r25
 12a:	85 bd       	out	0x25, r24	; 37
 12c:	83 81       	ldd	r24, Z+3	; 0x03
 12e:	84 bd       	out	0x24, r24	; 36
 130:	85 81       	ldd	r24, Z+5	; 0x05
 132:	83 bd       	out	0x23, r24	; 35
 134:	8f b7       	in	r24, 0x3f	; 63
 136:	80 68       	ori	r24, 0x80	; 128
 138:	8f bf       	out	0x3f, r24	; 63
 13a:	05 b4       	in	r0, 0x25	; 37
 13c:	03 fe       	sbrs	r0, 3
 13e:	04 c0       	rjmp	.+8      	; 0x148 <Timer_start+0x70>
 140:	89 b7       	in	r24, 0x39	; 57
 142:	80 68       	ori	r24, 0x80	; 128
 144:	89 bf       	out	0x39, r24	; 57
 146:	08 95       	ret
 148:	89 b7       	in	r24, 0x39	; 57
 14a:	80 64       	ori	r24, 0x40	; 64
 14c:	89 bf       	out	0x39, r24	; 57
 14e:	08 95       	ret
 150:	83 81       	ldd	r24, Z+3	; 0x03
 152:	8c b9       	out	0x0c, r24	; 12
 154:	81 81       	ldd	r24, Z+1	; 0x01
 156:	80 38       	cpi	r24, 0x80	; 128
 158:	69 f4       	brne	.+26     	; 0x174 <Timer_start+0x9c>
 15a:	8f b7       	in	r24, 0x3f	; 63
 15c:	80 68       	ori	r24, 0x80	; 128
 15e:	8f bf       	out	0x3f, r24	; 63
 160:	89 b7       	in	r24, 0x39	; 57
 162:	84 60       	ori	r24, 0x04	; 4
 164:	89 bf       	out	0x39, r24	; 57
 166:	8c e0       	ldi	r24, 0x0C	; 12
 168:	8f bd       	out	0x2f, r24	; 47
 16a:	9e b5       	in	r25, 0x2e	; 46
 16c:	82 81       	ldd	r24, Z+2	; 0x02
 16e:	89 2b       	or	r24, r25
 170:	8e bd       	out	0x2e, r24	; 46
 172:	08 95       	ret
 174:	88 38       	cpi	r24, 0x88	; 136
 176:	19 f5       	brne	.+70     	; 0x1be <Timer_start+0xe6>
 178:	8c e0       	ldi	r24, 0x0C	; 12
 17a:	8f bd       	out	0x2f, r24	; 47
 17c:	8e b5       	in	r24, 0x2e	; 46
 17e:	88 60       	ori	r24, 0x08	; 8
 180:	8e bd       	out	0x2e, r24	; 46
 182:	87 81       	ldd	r24, Z+7	; 0x07
 184:	81 11       	cpse	r24, r1
 186:	0b c0       	rjmp	.+22     	; 0x19e <Timer_start+0xc6>
 188:	8f b7       	in	r24, 0x3f	; 63
 18a:	80 68       	ori	r24, 0x80	; 128
 18c:	8f bf       	out	0x3f, r24	; 63
 18e:	89 b7       	in	r24, 0x39	; 57
 190:	80 61       	ori	r24, 0x10	; 16
 192:	89 bf       	out	0x39, r24	; 57
 194:	85 81       	ldd	r24, Z+5	; 0x05
 196:	8a bd       	out	0x2a, r24	; 42
 198:	86 81       	ldd	r24, Z+6	; 0x06
 19a:	8b bd       	out	0x2b, r24	; 43
 19c:	0c c0       	rjmp	.+24     	; 0x1b6 <Timer_start+0xde>
 19e:	81 30       	cpi	r24, 0x01	; 1
 1a0:	51 f4       	brne	.+20     	; 0x1b6 <Timer_start+0xde>
 1a2:	8f b7       	in	r24, 0x3f	; 63
 1a4:	80 68       	ori	r24, 0x80	; 128
 1a6:	8f bf       	out	0x3f, r24	; 63
 1a8:	89 b7       	in	r24, 0x39	; 57
 1aa:	88 60       	ori	r24, 0x08	; 8
 1ac:	89 bf       	out	0x39, r24	; 57
 1ae:	85 81       	ldd	r24, Z+5	; 0x05
 1b0:	8a bd       	out	0x2a, r24	; 42
 1b2:	86 81       	ldd	r24, Z+6	; 0x06
 1b4:	8b bd       	out	0x2b, r24	; 43
 1b6:	9e b5       	in	r25, 0x2e	; 46
 1b8:	82 81       	ldd	r24, Z+2	; 0x02
 1ba:	89 2b       	or	r24, r25
 1bc:	8e bd       	out	0x2e, r24	; 46
 1be:	08 95       	ret

Disassembly of section .text.Timer1A_CTC_flag:

000005c0 <Timer1A_CTC_flag>:


uint8_t Timer1A_CTC_flag()
{
	while(BIT_IS_CLEAR(TIFR,OCF1A));
 5c0:	08 b6       	in	r0, 0x38	; 56
 5c2:	04 fe       	sbrs	r0, 4
 5c4:	fd cf       	rjmp	.-6      	; 0x5c0 <Timer1A_CTC_flag>
	SET_BIT(TIFR,OCF1A);
 5c6:	88 b7       	in	r24, 0x38	; 56
 5c8:	80 61       	ori	r24, 0x10	; 16
 5ca:	88 bf       	out	0x38, r24	; 56
	return 1;
}
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	08 95       	ret
