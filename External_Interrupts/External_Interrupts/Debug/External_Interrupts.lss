
External_Interrupts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002ce  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  000002ce  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000a0  00000000  00000000  000002fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001145  00000000  00000000  0000039d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000076c  00000000  00000000  000014e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000005b9  00000000  00000000  00001c4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000134  00000000  00000000  00002208  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001f3  00000000  00000000  0000233c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000470  00000000  00000000  0000252f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000088  00000000  00000000  0000299f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000256  00000256  000002ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002a28  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.test    00000032  000001e2  000001e2  00000256  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.main    0000001a  00000232  00000232  000002a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__vector_1 0000004e  00000194  00000194  00000208  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.EX_INT_0_init 0000001e  00000214  00000214  00000288  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.EX_INT_setCallBackFunction 0000000a  0000024c  0000024c  000002c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .bss.g_callBackPtrINT0 00000002  00800060  00800060  000002ce  2**0
                  ALLOC
 19 .text.GPIO_setupPinDirection 000000e6  000000ae  000000ae  00000122  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2d 00 	jmp	0x5a	; 0x5a <__ctors_end>
   4:	0c 94 ca 00 	jmp	0x194	; 0x194 <__vector_1>
   8:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
   c:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  10:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  14:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  18:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  1c:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  20:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  24:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  28:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  2c:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  30:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  34:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  38:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  3c:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  40:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  44:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  48:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  4c:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  50:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 62       	ori	r16, 0x20	; 32
  58:	80 00       	.word	0x0080	; ????

0000005a <__ctors_end>:
  5a:	11 24       	eor	r1, r1
  5c:	1f be       	out	0x3f, r1	; 63
  5e:	cf e5       	ldi	r28, 0x5F	; 95
  60:	d8 e0       	ldi	r29, 0x08	; 8
  62:	de bf       	out	0x3e, r29	; 62
  64:	cd bf       	out	0x3d, r28	; 61

00000066 <__do_copy_data>:
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	40 e0       	ldi	r20, 0x00	; 0
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__do_clear_bss+0x8>
  6e:	b5 91       	lpm	r27, Z+
  70:	a5 91       	lpm	r26, Z+
  72:	35 91       	lpm	r19, Z+
  74:	25 91       	lpm	r18, Z+
  76:	05 91       	lpm	r16, Z+
  78:	07 fd       	sbrc	r16, 7
  7a:	0c c0       	rjmp	.+24     	; 0x94 <__do_clear_bss>
  7c:	95 91       	lpm	r25, Z+
  7e:	85 91       	lpm	r24, Z+
  80:	ef 01       	movw	r28, r30
  82:	f9 2f       	mov	r31, r25
  84:	e8 2f       	mov	r30, r24
  86:	05 90       	lpm	r0, Z+
  88:	0d 92       	st	X+, r0
  8a:	a2 17       	cp	r26, r18
  8c:	b3 07       	cpc	r27, r19
  8e:	d9 f7       	brne	.-10     	; 0x86 <__do_copy_data+0x20>
  90:	fe 01       	movw	r30, r28
  92:	04 c0       	rjmp	.+8      	; 0x9c <__do_clear_bss+0x8>

00000094 <__do_clear_bss>:
  94:	1d 92       	st	X+, r1
  96:	a2 17       	cp	r26, r18
  98:	b3 07       	cpc	r27, r19
  9a:	e1 f7       	brne	.-8      	; 0x94 <__do_clear_bss>
  9c:	e9 35       	cpi	r30, 0x59	; 89
  9e:	f4 07       	cpc	r31, r20
  a0:	31 f7       	brne	.-52     	; 0x6e <__do_copy_data+0x8>
  a2:	0e 94 19 01 	call	0x232	; 0x232 <main>
  a6:	0c 94 55 00 	jmp	0xaa	; 0xaa <_exit>

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>

Disassembly of section .text:

00000256 <__bad_interrupt>:
 256:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.test:

000001e2 <test>:
#include <avr/io.h>
#include <util/delay.h>

void test ( void )
{
	PORTA |= (1<<0);
 1e2:	8b b3       	in	r24, 0x1b	; 27
 1e4:	81 60       	ori	r24, 0x01	; 1
 1e6:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e8:	2f e3       	ldi	r18, 0x3F	; 63
 1ea:	8d e0       	ldi	r24, 0x0D	; 13
 1ec:	93 e0       	ldi	r25, 0x03	; 3
 1ee:	21 50       	subi	r18, 0x01	; 1
 1f0:	80 40       	sbci	r24, 0x00	; 0
 1f2:	90 40       	sbci	r25, 0x00	; 0
 1f4:	e1 f7       	brne	.-8      	; 0x1ee <test+0xc>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <test+0x16>
 1f8:	00 00       	nop
	_delay_ms(1000);
	PORTA &= ~(1<<0);
 1fa:	8b b3       	in	r24, 0x1b	; 27
 1fc:	8e 7f       	andi	r24, 0xFE	; 254
 1fe:	8b bb       	out	0x1b, r24	; 27
 200:	2f e3       	ldi	r18, 0x3F	; 63
 202:	8d e0       	ldi	r24, 0x0D	; 13
 204:	93 e0       	ldi	r25, 0x03	; 3
 206:	21 50       	subi	r18, 0x01	; 1
 208:	80 40       	sbci	r24, 0x00	; 0
 20a:	90 40       	sbci	r25, 0x00	; 0
 20c:	e1 f7       	brne	.-8      	; 0x206 <test+0x24>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <test+0x2e>
 210:	00 00       	nop
 212:	08 95       	ret

Disassembly of section .text.main:

00000232 <main>:
	_delay_ms(1000);
}

int main ( void )
{
	SREG |= (1<<7);
 232:	8f b7       	in	r24, 0x3f	; 63
 234:	80 68       	ori	r24, 0x80	; 128
 236:	8f bf       	out	0x3f, r24	; 63
	DDRA |= (1<<0);
 238:	8a b3       	in	r24, 0x1a	; 26
 23a:	81 60       	ori	r24, 0x01	; 1
 23c:	8a bb       	out	0x1a, r24	; 26

	EX_INT_0_init();
 23e:	0e 94 0a 01 	call	0x214	; 0x214 <EX_INT_0_init>
	EX_INT_setCallBackFunction(test);
 242:	81 ef       	ldi	r24, 0xF1	; 241
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 26 01 	call	0x24c	; 0x24c <EX_INT_setCallBackFunction>
 24a:	ff cf       	rjmp	.-2      	; 0x24a <main+0x18>

Disassembly of section .text.__vector_1:

00000194 <__vector_1>:




ISR(INT0_vect)
{
 194:	1f 92       	push	r1
 196:	0f 92       	push	r0
 198:	0f b6       	in	r0, 0x3f	; 63
 19a:	0f 92       	push	r0
 19c:	11 24       	eor	r1, r1
 19e:	2f 93       	push	r18
 1a0:	3f 93       	push	r19
 1a2:	4f 93       	push	r20
 1a4:	5f 93       	push	r21
 1a6:	6f 93       	push	r22
 1a8:	7f 93       	push	r23
 1aa:	8f 93       	push	r24
 1ac:	9f 93       	push	r25
 1ae:	af 93       	push	r26
 1b0:	bf 93       	push	r27
 1b2:	ef 93       	push	r30
 1b4:	ff 93       	push	r31
/*	DDRA |= (1<<0);
	PORTA |= (1<<0);
	_delay_ms(1000);
	PORTA &= ~(1<<0);*/
 g_callBackPtrINT0();
 1b6:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1ba:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1be:	09 95       	icall
}
 1c0:	ff 91       	pop	r31
 1c2:	ef 91       	pop	r30
 1c4:	bf 91       	pop	r27
 1c6:	af 91       	pop	r26
 1c8:	9f 91       	pop	r25
 1ca:	8f 91       	pop	r24
 1cc:	7f 91       	pop	r23
 1ce:	6f 91       	pop	r22
 1d0:	5f 91       	pop	r21
 1d2:	4f 91       	pop	r20
 1d4:	3f 91       	pop	r19
 1d6:	2f 91       	pop	r18
 1d8:	0f 90       	pop	r0
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	0f 90       	pop	r0
 1de:	1f 90       	pop	r1
 1e0:	18 95       	reti

Disassembly of section .text.EX_INT_0_init:

00000214 <EX_INT_0_init>:
 * Initializes interrupt 0 with rising edge or falling edge.
 */
void EX_INT_0_init( void )
{
	/* Define INT0 pin direction as output */
	GPIO_setupPinDirection(PORTD_ID, PIN2_ID, PIN_INPUT);
 214:	40 e0       	ldi	r20, 0x00	; 0
 216:	62 e0       	ldi	r22, 0x02	; 2
 218:	83 e0       	ldi	r24, 0x03	; 3
 21a:	0e 94 57 00 	call	0xae	; 0xae <__data_load_end>
	/* Enable inturrupt 0 interrupt */
	SET_BIT(GICR, EX_INT0_ENABLE_BIT);
 21e:	8b b7       	in	r24, 0x3b	; 59
 220:	80 64       	ori	r24, 0x40	; 64
 222:	8b bf       	out	0x3b, r24	; 59
	/* Select sense control according to configutations */
#if EX_INT0_SENSE == RISING_EDGE
	SET_BIT(MCUCR, EX_INT0_SENSE_CONTROL_00);
 224:	85 b7       	in	r24, 0x35	; 53
 226:	81 60       	ori	r24, 0x01	; 1
 228:	85 bf       	out	0x35, r24	; 53
	SET_BIT(MCUCR, EX_INT0_SENSE_CONTROL_01);
 22a:	85 b7       	in	r24, 0x35	; 53
 22c:	82 60       	ori	r24, 0x02	; 2
 22e:	85 bf       	out	0x35, r24	; 53
 230:	08 95       	ret

Disassembly of section .text.EX_INT_setCallBackFunction:

0000024c <EX_INT_setCallBackFunction>:
 * Description:
 * Set call back function for interrupt 0
 */
void EX_INT_setCallBackFunction(volatile void (*callBack)(void))
{
	g_callBackPtrINT0 = callBack;
 24c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 250:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 254:	08 95       	ret

Disassembly of section .text.GPIO_setupPinDirection:

000000ae <GPIO_setupPinDirection>:
 * If the port number or pin number are not correct, the function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 a_portID, uint8 a_pinID, PinDirectionType a_direction)
{
	/*If the port number or pin number are not correct, the function will not handle the request.*/
	if(a_portID >= NUMBER_OF_PORTS || a_pinID >= NUMBER_OF_PINS_PER_PORT)
  ae:	84 30       	cpi	r24, 0x04	; 4
  b0:	08 f0       	brcs	.+2      	; 0xb4 <GPIO_setupPinDirection+0x6>
  b2:	6f c0       	rjmp	.+222    	; 0x192 <GPIO_setupPinDirection+0xe4>
  b4:	67 30       	cpi	r22, 0x07	; 7
  b6:	08 f0       	brcs	.+2      	; 0xba <GPIO_setupPinDirection+0xc>
  b8:	6c c0       	rjmp	.+216    	; 0x192 <GPIO_setupPinDirection+0xe4>
		/*
		 * Select the correct register based on port
		 * If required direction is input, clear bit in the port DDR register
		 * If required direction is output, set bit in the port DDR register
		 */
		switch(a_portID)
  ba:	81 30       	cpi	r24, 0x01	; 1
  bc:	01 f1       	breq	.+64     	; 0xfe <GPIO_setupPinDirection+0x50>
  be:	30 f0       	brcs	.+12     	; 0xcc <GPIO_setupPinDirection+0x1e>
  c0:	82 30       	cpi	r24, 0x02	; 2
  c2:	b1 f1       	breq	.+108    	; 0x130 <GPIO_setupPinDirection+0x82>
  c4:	83 30       	cpi	r24, 0x03	; 3
  c6:	09 f4       	brne	.+2      	; 0xca <GPIO_setupPinDirection+0x1c>
  c8:	4c c0       	rjmp	.+152    	; 0x162 <GPIO_setupPinDirection+0xb4>
  ca:	08 95       	ret
		{
		case PORTA_ID:
			if(a_direction == PIN_INPUT)
  cc:	41 11       	cpse	r20, r1
  ce:	0c c0       	rjmp	.+24     	; 0xe8 <GPIO_setupPinDirection+0x3a>
			{
				CLEAR_BIT(DDRA, a_pinID);
  d0:	2a b3       	in	r18, 0x1a	; 26
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <GPIO_setupPinDirection+0x2e>
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <GPIO_setupPinDirection+0x2a>
  e0:	80 95       	com	r24
  e2:	82 23       	and	r24, r18
  e4:	8a bb       	out	0x1a, r24	; 26
  e6:	08 95       	ret
			}
			else
			{
				SET_BIT(DDRA, a_pinID);
  e8:	2a b3       	in	r18, 0x1a	; 26
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <GPIO_setupPinDirection+0x46>
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	6a 95       	dec	r22
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <GPIO_setupPinDirection+0x42>
  f8:	82 2b       	or	r24, r18
  fa:	8a bb       	out	0x1a, r24	; 26
  fc:	08 95       	ret
			}
			break;
		case PORTB_ID:
			if(a_direction == PIN_INPUT)
  fe:	41 11       	cpse	r20, r1
 100:	0c c0       	rjmp	.+24     	; 0x11a <GPIO_setupPinDirection+0x6c>
			{
				CLEAR_BIT(DDRB, a_pinID);
 102:	27 b3       	in	r18, 0x17	; 23
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	02 c0       	rjmp	.+4      	; 0x10e <GPIO_setupPinDirection+0x60>
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	6a 95       	dec	r22
 110:	e2 f7       	brpl	.-8      	; 0x10a <GPIO_setupPinDirection+0x5c>
 112:	80 95       	com	r24
 114:	82 23       	and	r24, r18
 116:	87 bb       	out	0x17, r24	; 23
 118:	08 95       	ret
			}
			else
			{
				SET_BIT(DDRB, a_pinID);
 11a:	27 b3       	in	r18, 0x17	; 23
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	02 c0       	rjmp	.+4      	; 0x126 <GPIO_setupPinDirection+0x78>
 122:	88 0f       	add	r24, r24
 124:	99 1f       	adc	r25, r25
 126:	6a 95       	dec	r22
 128:	e2 f7       	brpl	.-8      	; 0x122 <GPIO_setupPinDirection+0x74>
 12a:	82 2b       	or	r24, r18
 12c:	87 bb       	out	0x17, r24	; 23
 12e:	08 95       	ret
			}
			break;
		case PORTC_ID:
			if(a_direction == PIN_INPUT)
 130:	41 11       	cpse	r20, r1
 132:	0c c0       	rjmp	.+24     	; 0x14c <GPIO_setupPinDirection+0x9e>
			{
				CLEAR_BIT(DDRC, a_pinID);
 134:	24 b3       	in	r18, 0x14	; 20
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <GPIO_setupPinDirection+0x92>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <GPIO_setupPinDirection+0x8e>
 144:	80 95       	com	r24
 146:	82 23       	and	r24, r18
 148:	84 bb       	out	0x14, r24	; 20
 14a:	08 95       	ret
			}
			else
			{
				SET_BIT(DDRC, a_pinID);
 14c:	24 b3       	in	r18, 0x14	; 20
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	02 c0       	rjmp	.+4      	; 0x158 <GPIO_setupPinDirection+0xaa>
 154:	88 0f       	add	r24, r24
 156:	99 1f       	adc	r25, r25
 158:	6a 95       	dec	r22
 15a:	e2 f7       	brpl	.-8      	; 0x154 <GPIO_setupPinDirection+0xa6>
 15c:	82 2b       	or	r24, r18
 15e:	84 bb       	out	0x14, r24	; 20
 160:	08 95       	ret
			}
			break;
		case PORTD_ID:
			if(a_direction == PIN_INPUT)
 162:	41 11       	cpse	r20, r1
 164:	0c c0       	rjmp	.+24     	; 0x17e <GPIO_setupPinDirection+0xd0>
			{
				CLEAR_BIT(DDRD, a_pinID);
 166:	21 b3       	in	r18, 0x11	; 17
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	02 c0       	rjmp	.+4      	; 0x172 <GPIO_setupPinDirection+0xc4>
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	6a 95       	dec	r22
 174:	e2 f7       	brpl	.-8      	; 0x16e <GPIO_setupPinDirection+0xc0>
 176:	80 95       	com	r24
 178:	82 23       	and	r24, r18
 17a:	81 bb       	out	0x11, r24	; 17
 17c:	08 95       	ret
			}
			else
			{
				SET_BIT(DDRD, a_pinID);
 17e:	21 b3       	in	r18, 0x11	; 17
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <GPIO_setupPinDirection+0xdc>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <GPIO_setupPinDirection+0xd8>
 18e:	82 2b       	or	r24, r18
 190:	81 bb       	out	0x11, r24	; 17
 192:	08 95       	ret
