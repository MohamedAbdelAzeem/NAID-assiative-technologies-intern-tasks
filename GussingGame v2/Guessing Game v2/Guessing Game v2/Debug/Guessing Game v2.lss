
Guessing Game v2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000a34  00000ae8  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000ae8  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000001c8  00000000  00000000  00000b17  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00002820  00000000  00000000  00000cdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000099a  00000000  00000000  000034ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000d83  00000000  00000000  00003e99  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000480  00000000  00000000  00004c1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002e5  00000000  00000000  0000509c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000fbf  00000000  00000000  00005381  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000168  00000000  00000000  00006340  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000a20  00000a20  00000ad4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000064a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .rodata       00000010  00800060  00000a24  00000ad8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 14 .text.delay_ms 00000080  00000512  00000512  000005c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.delay_us 00000084  0000048e  0000048e  00000542  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.KeyPad_4x4_adjustKeyNumber 00000056  000007d0  000007d0  00000884  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.KeyPad_getPressedKey 00000068  00000604  00000604  000006b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.LCD_sendCommand 00000058  000006c8  000006c8  0000077c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.LCD_init 0000004a  00000910  00000910  000009c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.LCD_displayCharacter 00000058  00000720  00000720  000007d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.LCD_displayString 00000036  0000095a  0000095a  00000a0e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.LCD_goToRowColumn 0000002e  00000990  00000990  00000a44  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.LCD_displayStringRowColumn 0000001e  000009de  000009de  00000a92  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.LCD_clearScreen 00000008  00000a18  00000a18  00000acc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.tostring 00000072  00000592  00000592  00000646  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .progmemx.data 00000035  000000d4  000000d4  00000188  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 27 .text.main    000000c8  000003c6  000003c6  0000047a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.DIO_SetPinDirection 000000ea  0000010a  0000010a  000001be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.DIO_SetPinValue 000000ea  000001f4  000001f4  000002a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.DIO_SetPortDirection 00000058  00000778  00000778  0000082c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.DIO_SetPortValue 00000020  000009be  000009be  00000a72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.DIO_GetPinValue 0000005c  0000066c  0000066c  00000720  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.__vector_10 0000004e  00000826  00000826  000008da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.__vector_4 0000004e  00000874  00000874  00000928  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.__vector_7 0000004e  000008c2  000008c2  00000976  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.Timer_start 000000e8  000002de  000002de  00000392  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.Timer1A_CTC_flag 00000010  000009fc  000009fc  00000ab0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .bss.g_callBackPtrTimer2CTC 00000002  00800070  00800070  00000ae8  2**0
                  ALLOC
 39 .bss.g_callBackPtrTimer1COMPA 00000002  00800072  00800072  00000ae8  2**0
                  ALLOC
 40 .bss.g_callBackPtrTimer0CTC 00000002  00800074  00800074  00000ae8  2**0
                  ALLOC
 41 .text.libgcc  0000000c  00000a0c  00000a0c  00000ac0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 40 00 	jmp	0x80	; 0x80 <__ctors_end>
   4:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>
   8:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>
   c:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>
  10:	0c 94 3a 04 	jmp	0x874	; 0x874 <__vector_4>
  14:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>
  18:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>
  1c:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__vector_7>
  20:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>
  24:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>
  28:	0c 94 13 04 	jmp	0x826	; 0x826 <__vector_10>
  2c:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>
  30:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>
  34:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>
  38:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>
  3c:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>
  40:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>
  44:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>
  48:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>
  4c:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>
  50:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>
  54:	f3 03       	fmuls	r23, r19
  56:	11 04       	cpc	r1, r1
  58:	f5 03       	fmuls	r23, r21
  5a:	f7 03       	fmuls	r23, r23
  5c:	f9 03       	fmulsu	r23, r17
  5e:	fb 03       	fmulsu	r23, r19
  60:	fd 03       	fmulsu	r23, r21
  62:	ff 03       	fmulsu	r23, r23
  64:	01 04       	cpc	r0, r1
  66:	03 04       	cpc	r0, r3
  68:	05 04       	cpc	r0, r5
  6a:	07 04       	cpc	r0, r7
  6c:	09 04       	cpc	r0, r9
  6e:	0b 04       	cpc	r0, r11
  70:	0d 04       	cpc	r0, r13
  72:	0f 04       	cpc	r0, r15

00000074 <.dinit>:
  74:	00 60       	ori	r16, 0x00	; 0
  76:	00 70       	andi	r16, 0x00	; 0
  78:	00 0a       	sbc	r0, r16
  7a:	24 00       	.word	0x0024	; ????
  7c:	70 00       	.word	0x0070	; ????
  7e:	76 80       	ldd	r7, Z+6	; 0x06

00000080 <__ctors_end>:
  80:	11 24       	eor	r1, r1
  82:	1f be       	out	0x3f, r1	; 63
  84:	cf e5       	ldi	r28, 0x5F	; 95
  86:	d8 e0       	ldi	r29, 0x08	; 8
  88:	de bf       	out	0x3e, r29	; 62
  8a:	cd bf       	out	0x3d, r28	; 61

0000008c <__do_copy_data>:
  8c:	e4 e7       	ldi	r30, 0x74	; 116
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	40 e0       	ldi	r20, 0x00	; 0
  92:	17 c0       	rjmp	.+46     	; 0xc2 <__do_clear_bss+0x8>
  94:	b5 91       	lpm	r27, Z+
  96:	a5 91       	lpm	r26, Z+
  98:	35 91       	lpm	r19, Z+
  9a:	25 91       	lpm	r18, Z+
  9c:	05 91       	lpm	r16, Z+
  9e:	07 fd       	sbrc	r16, 7
  a0:	0c c0       	rjmp	.+24     	; 0xba <__do_clear_bss>
  a2:	95 91       	lpm	r25, Z+
  a4:	85 91       	lpm	r24, Z+
  a6:	ef 01       	movw	r28, r30
  a8:	f9 2f       	mov	r31, r25
  aa:	e8 2f       	mov	r30, r24
  ac:	05 90       	lpm	r0, Z+
  ae:	0d 92       	st	X+, r0
  b0:	a2 17       	cp	r26, r18
  b2:	b3 07       	cpc	r27, r19
  b4:	d9 f7       	brne	.-10     	; 0xac <__do_copy_data+0x20>
  b6:	fe 01       	movw	r30, r28
  b8:	04 c0       	rjmp	.+8      	; 0xc2 <__do_clear_bss+0x8>

000000ba <__do_clear_bss>:
  ba:	1d 92       	st	X+, r1
  bc:	a2 17       	cp	r26, r18
  be:	b3 07       	cpc	r27, r19
  c0:	e1 f7       	brne	.-8      	; 0xba <__do_clear_bss>
  c2:	e0 38       	cpi	r30, 0x80	; 128
  c4:	f4 07       	cpc	r31, r20
  c6:	31 f7       	brne	.-52     	; 0x94 <__do_copy_data+0x8>
  c8:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <main>
  cc:	0c 94 68 00 	jmp	0xd0	; 0xd0 <_exit>

000000d0 <_exit>:
  d0:	f8 94       	cli

000000d2 <__stop_program>:
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <__stop_program>

Disassembly of section .text:

00000a20 <__bad_interrupt>:
 a20:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.delay_ms:

00000512 <delay_ms>:
/* if you want delay more than 250us use delay_ms  */


/* Enter delay in Milliseconds */
void delay_ms(uint16_t delay)
{
 512:	ef 92       	push	r14
 514:	ff 92       	push	r15
 516:	0f 93       	push	r16
 518:	1f 93       	push	r17
 51a:	cf 93       	push	r28
 51c:	df 93       	push	r29
 51e:	cd b7       	in	r28, 0x3d	; 61
 520:	de b7       	in	r29, 0x3e	; 62
 522:	28 97       	sbiw	r28, 0x08	; 8
 524:	0f b6       	in	r0, 0x3f	; 63
 526:	f8 94       	cli
 528:	de bf       	out	0x3e, r29	; 62
 52a:	0f be       	out	0x3f, r0	; 63
 52c:	cd bf       	out	0x3d, r28	; 61
 52e:	7c 01       	movw	r14, r24
	uint16_t counter=  0;
	/* configure timer to count to  100usec  */
	St_Config_Timer_t timer0_config1 = {TIMER1, COMPARE_MODE_toggel , INTERNAL_CLK_PRESCALAR0_1 , DEFAULT_INITIAL_VALUE,100,CHANNEL_A};
 530:	88 e0       	ldi	r24, 0x08	; 8
 532:	e0 e6       	ldi	r30, 0x60	; 96
 534:	f0 e0       	ldi	r31, 0x00	; 0
 536:	de 01       	movw	r26, r28
 538:	11 96       	adiw	r26, 0x01	; 1
 53a:	01 90       	ld	r0, Z+
 53c:	0d 92       	st	X+, r0
 53e:	8a 95       	dec	r24
 540:	e1 f7       	brne	.-8      	; 0x53a <delay_ms+0x28>

	Timer_start(&timer0_config1);
 542:	ce 01       	movw	r24, r28
 544:	01 96       	adiw	r24, 0x01	; 1
 546:	0e 94 6f 01 	call	0x2de	; 0x2de <Timer_start>


/* Enter delay in Milliseconds */
void delay_ms(uint16_t delay)
{
	uint16_t counter=  0;
 54a:	00 e0       	ldi	r16, 0x00	; 0
 54c:	10 e0       	ldi	r17, 0x00	; 0
	St_Config_Timer_t timer0_config1 = {TIMER1, COMPARE_MODE_toggel , INTERNAL_CLK_PRESCALAR0_1 , DEFAULT_INITIAL_VALUE,100,CHANNEL_A};

	Timer_start(&timer0_config1);
	 while(1)
		{
			if(Timer1A_CTC_flag())
 54e:	0e 94 fe 04 	call	0x9fc	; 0x9fc <Timer1A_CTC_flag>
 552:	88 23       	and	r24, r24
 554:	e1 f3       	breq	.-8      	; 0x54e <delay_ms+0x3c>
			{
				 counter++;
 556:	0f 5f       	subi	r16, 0xFF	; 255
 558:	1f 4f       	sbci	r17, 0xFF	; 255
				if(counter == delay * 10  )
 55a:	c7 01       	movw	r24, r14
 55c:	88 0f       	add	r24, r24
 55e:	99 1f       	adc	r25, r25
 560:	88 0f       	add	r24, r24
 562:	99 1f       	adc	r25, r25
 564:	88 0f       	add	r24, r24
 566:	99 1f       	adc	r25, r25
 568:	97 01       	movw	r18, r14
 56a:	22 0f       	add	r18, r18
 56c:	33 1f       	adc	r19, r19
 56e:	82 0f       	add	r24, r18
 570:	93 1f       	adc	r25, r19
 572:	08 17       	cp	r16, r24
 574:	19 07       	cpc	r17, r25
 576:	59 f7       	brne	.-42     	; 0x54e <delay_ms+0x3c>
				}
		
			}
		
		}
}
 578:	28 96       	adiw	r28, 0x08	; 8
 57a:	0f b6       	in	r0, 0x3f	; 63
 57c:	f8 94       	cli
 57e:	de bf       	out	0x3e, r29	; 62
 580:	0f be       	out	0x3f, r0	; 63
 582:	cd bf       	out	0x3d, r28	; 61
 584:	df 91       	pop	r29
 586:	cf 91       	pop	r28
 588:	1f 91       	pop	r17
 58a:	0f 91       	pop	r16
 58c:	ff 90       	pop	r15
 58e:	ef 90       	pop	r14
 590:	08 95       	ret

Disassembly of section .text.delay_us:

0000048e <delay_us>:



void delay_us(uint16_t delay)
{
 48e:	ef 92       	push	r14
 490:	ff 92       	push	r15
 492:	0f 93       	push	r16
 494:	1f 93       	push	r17
 496:	cf 93       	push	r28
 498:	df 93       	push	r29
 49a:	cd b7       	in	r28, 0x3d	; 61
 49c:	de b7       	in	r29, 0x3e	; 62
 49e:	28 97       	sbiw	r28, 0x08	; 8
 4a0:	0f b6       	in	r0, 0x3f	; 63
 4a2:	f8 94       	cli
 4a4:	de bf       	out	0x3e, r29	; 62
 4a6:	0f be       	out	0x3f, r0	; 63
 4a8:	cd bf       	out	0x3d, r28	; 61
 4aa:	7c 01       	movw	r14, r24
	
		uint16_t counter=  0;
		/* configure timer to count to  100usec  */
		St_Config_Timer_t timer0_config1 = {TIMER1, COMPARE_MODE_toggel , INTERNAL_CLK_PRESCALAR0_1 , DEFAULT_INITIAL_VALUE,0,CHANNEL_A};
 4ac:	88 e0       	ldi	r24, 0x08	; 8
 4ae:	e8 e6       	ldi	r30, 0x68	; 104
 4b0:	f0 e0       	ldi	r31, 0x00	; 0
 4b2:	de 01       	movw	r26, r28
 4b4:	11 96       	adiw	r26, 0x01	; 1
 4b6:	01 90       	ld	r0, Z+
 4b8:	0d 92       	st	X+, r0
 4ba:	8a 95       	dec	r24
 4bc:	e1 f7       	brne	.-8      	; 0x4b6 <delay_us+0x28>

		timer0_config1.compare_value = delay;
 4be:	ff 82       	std	Y+7, r15	; 0x07
 4c0:	ee 82       	std	Y+6, r14	; 0x06
		Timer_start(&timer0_config1);
 4c2:	ce 01       	movw	r24, r28
 4c4:	01 96       	adiw	r24, 0x01	; 1
 4c6:	0e 94 6f 01 	call	0x2de	; 0x2de <Timer_start>


void delay_us(uint16_t delay)
{
	
		uint16_t counter=  0;
 4ca:	00 e0       	ldi	r16, 0x00	; 0
 4cc:	10 e0       	ldi	r17, 0x00	; 0

		timer0_config1.compare_value = delay;
		Timer_start(&timer0_config1);
		while(1)
		{
			if(Timer1A_CTC_flag())
 4ce:	0e 94 fe 04 	call	0x9fc	; 0x9fc <Timer1A_CTC_flag>
 4d2:	88 23       	and	r24, r24
 4d4:	e1 f3       	breq	.-8      	; 0x4ce <delay_us+0x40>
			{
				counter++;
 4d6:	0f 5f       	subi	r16, 0xFF	; 255
 4d8:	1f 4f       	sbci	r17, 0xFF	; 255
				if(counter == delay * 10  )
 4da:	c7 01       	movw	r24, r14
 4dc:	88 0f       	add	r24, r24
 4de:	99 1f       	adc	r25, r25
 4e0:	88 0f       	add	r24, r24
 4e2:	99 1f       	adc	r25, r25
 4e4:	88 0f       	add	r24, r24
 4e6:	99 1f       	adc	r25, r25
 4e8:	97 01       	movw	r18, r14
 4ea:	22 0f       	add	r18, r18
 4ec:	33 1f       	adc	r19, r19
 4ee:	82 0f       	add	r24, r18
 4f0:	93 1f       	adc	r25, r19
 4f2:	08 17       	cp	r16, r24
 4f4:	19 07       	cpc	r17, r25
 4f6:	59 f7       	brne	.-42     	; 0x4ce <delay_us+0x40>
				}
				
			}
			
		}
 4f8:	28 96       	adiw	r28, 0x08	; 8
 4fa:	0f b6       	in	r0, 0x3f	; 63
 4fc:	f8 94       	cli
 4fe:	de bf       	out	0x3e, r29	; 62
 500:	0f be       	out	0x3f, r0	; 63
 502:	cd bf       	out	0x3d, r28	; 61
 504:	df 91       	pop	r29
 506:	cf 91       	pop	r28
 508:	1f 91       	pop	r17
 50a:	0f 91       	pop	r16
 50c:	ff 90       	pop	r15
 50e:	ef 90       	pop	r14
 510:	08 95       	ret

Disassembly of section .text.KeyPad_4x4_adjustKeyNumber:

000007d0 <KeyPad_4x4_adjustKeyNumber>:

#elif (N_col == 4)

static uint8_t KeyPad_4x4_adjustKeyNumber(uint8_t button_number)
{
	switch(button_number)
 7d0:	48 2f       	mov	r20, r24
 7d2:	50 e0       	ldi	r21, 0x00	; 0
 7d4:	fa 01       	movw	r30, r20
 7d6:	31 97       	sbiw	r30, 0x01	; 1
 7d8:	e0 31       	cpi	r30, 0x10	; 16
 7da:	f1 05       	cpc	r31, r1
 7dc:	18 f5       	brcc	.+70     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 7de:	e6 5d       	subi	r30, 0xD6	; 214
 7e0:	ff 4f       	sbci	r31, 0xFF	; 255
 7e2:	0c 94 06 05 	jmp	0xa0c	; 0xa0c <__tablejump2__>
	{
		case 1: return 7;
 7e6:	87 e0       	ldi	r24, 0x07	; 7
 7e8:	08 95       	ret
				break;
		case 2: return 8;
				break;
		case 3: return 9;
 7ea:	89 e0       	ldi	r24, 0x09	; 9
 7ec:	08 95       	ret
				break;
		case 4: return '%'; // ASCII Code of %
 7ee:	85 e2       	ldi	r24, 0x25	; 37
 7f0:	08 95       	ret
				break;
		case 5: return 4;
 7f2:	84 e0       	ldi	r24, 0x04	; 4
 7f4:	08 95       	ret
				break;
		case 6: return 5;
 7f6:	85 e0       	ldi	r24, 0x05	; 5
 7f8:	08 95       	ret
				break;
		case 7: return 6;
 7fa:	86 e0       	ldi	r24, 0x06	; 6
 7fc:	08 95       	ret
				break;
		case 8: return '*'; /* ASCII Code of '*' */
 7fe:	8a e2       	ldi	r24, 0x2A	; 42
 800:	08 95       	ret
				break;
		case 9: return 1;
 802:	81 e0       	ldi	r24, 0x01	; 1
 804:	08 95       	ret
				break;
		case 10: return 2;
 806:	82 e0       	ldi	r24, 0x02	; 2
 808:	08 95       	ret
				break;
		case 11: return 3;
 80a:	83 e0       	ldi	r24, 0x03	; 3
 80c:	08 95       	ret
				break;
		case 12: return '-'; /* ASCII Code of '-' */
 80e:	8d e2       	ldi	r24, 0x2D	; 45
 810:	08 95       	ret
				break;
		case 13: return 13;  /* ASCII of Enter */
 812:	8d e0       	ldi	r24, 0x0D	; 13
 814:	08 95       	ret
				break;
		case 14: return 0;
 816:	80 e0       	ldi	r24, 0x00	; 0
 818:	08 95       	ret
				break;
		case 15: return '='; /* ASCII Code of '=' */
 81a:	8d e3       	ldi	r24, 0x3D	; 61
 81c:	08 95       	ret
				break;
		case 16: return '+'; /* ASCII Code of '+' */
 81e:	8b e2       	ldi	r24, 0x2B	; 43
 820:	08 95       	ret
{
	switch(button_number)
	{
		case 1: return 7;
				break;
		case 2: return 8;
 822:	88 e0       	ldi	r24, 0x08	; 8
				break;
		case 16: return '+'; /* ASCII Code of '+' */
				break;
		default: return button_number;
	}
}
 824:	08 95       	ret

Disassembly of section .text.KeyPad_getPressedKey:

00000604 <KeyPad_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8_t KeyPad_getPressedKey(void)
{
 604:	cf 93       	push	r28
 606:	df 93       	push	r29
	uint8_t col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
 608:	d0 e0       	ldi	r29, 0x00	; 0
 60a:	2a c0       	rjmp	.+84     	; 0x660 <KeyPad_getPressedKey+0x5c>
			/*
			 * each time only one of the column pins will be output and
			 * the rest will be input pins include the row pins
			 */
			//KEYPAD_PORT_DIR = (0b00010000<<col);
			DIO_SetPortDirection(KEYPAD_PORT_DIR,INPUT);
 60c:	60 e0       	ldi	r22, 0x00	; 0
 60e:	80 e0       	ldi	r24, 0x00	; 0
 610:	0e 94 bc 03 	call	0x778	; 0x778 <DIO_SetPortDirection>
			DIO_SetPinDirection(KEYPAD_PORT_DIR, 4 + col, OUTPUT);
 614:	41 e0       	ldi	r20, 0x01	; 1
 616:	64 e0       	ldi	r22, 0x04	; 4
 618:	6d 0f       	add	r22, r29
 61a:	80 e0       	ldi	r24, 0x00	; 0
 61c:	0e 94 85 00 	call	0x10a	; 0x10a <DIO_SetPinDirection>
			/*
			 * clear the output pin column in this trace and enable the internal
			 * pull up resistors for the rows pins
			 */
			//KEYPAD_PORT_OUT = (~(0b00010000<<col));
			DIO_SetPortValue(KEYPAD_PORT_OUT,(~(0b00010000<<col)));
 620:	60 e1       	ldi	r22, 0x10	; 16
 622:	70 e0       	ldi	r23, 0x00	; 0
 624:	0d 2e       	mov	r0, r29
 626:	02 c0       	rjmp	.+4      	; 0x62c <KeyPad_getPressedKey+0x28>
 628:	66 0f       	add	r22, r22
 62a:	77 1f       	adc	r23, r23
 62c:	0a 94       	dec	r0
 62e:	e2 f7       	brpl	.-8      	; 0x628 <KeyPad_getPressedKey+0x24>
 630:	60 95       	com	r22
 632:	80 e0       	ldi	r24, 0x00	; 0
 634:	0e 94 df 04 	call	0x9be	; 0x9be <DIO_SetPortValue>

			for(row=0;row<N_row;row++) /* loop for rows */
 638:	c0 e0       	ldi	r28, 0x00	; 0
 63a:	0f c0       	rjmp	.+30     	; 0x65a <KeyPad_getPressedKey+0x56>
			{
				//BIT_IS_CLEAR(KEYPAD_PORT_IN,row)
				if(DIO_GetPinValue(KEYPAD_PORT_IN, row) == 0) /* if the switch is press in this row */
 63c:	6c 2f       	mov	r22, r28
 63e:	80 e0       	ldi	r24, 0x00	; 0
 640:	0e 94 36 03 	call	0x66c	; 0x66c <DIO_GetPinValue>
 644:	81 11       	cpse	r24, r1
 646:	08 c0       	rjmp	.+16     	; 0x658 <KeyPad_getPressedKey+0x54>
				{
					#if (N_col == 3)
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
 648:	cc 0f       	add	r28, r28
 64a:	cc 0f       	add	r28, r28
 64c:	8c 2f       	mov	r24, r28
 64e:	8d 0f       	add	r24, r29
 650:	8f 5f       	subi	r24, 0xFF	; 255
 652:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <KeyPad_4x4_adjustKeyNumber>
 656:	07 c0       	rjmp	.+14     	; 0x666 <KeyPad_getPressedKey+0x62>
			 * pull up resistors for the rows pins
			 */
			//KEYPAD_PORT_OUT = (~(0b00010000<<col));
			DIO_SetPortValue(KEYPAD_PORT_OUT,(~(0b00010000<<col)));

			for(row=0;row<N_row;row++) /* loop for rows */
 658:	cf 5f       	subi	r28, 0xFF	; 255
 65a:	c4 30       	cpi	r28, 0x04	; 4
 65c:	78 f3       	brcs	.-34     	; 0x63c <KeyPad_getPressedKey+0x38>
uint8_t KeyPad_getPressedKey(void)
{
	uint8_t col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
 65e:	df 5f       	subi	r29, 0xFF	; 255
 660:	d4 30       	cpi	r29, 0x04	; 4
 662:	a0 f2       	brcs	.-88     	; 0x60c <KeyPad_getPressedKey+0x8>
 664:	d1 cf       	rjmp	.-94     	; 0x608 <KeyPad_getPressedKey+0x4>
					#endif
				}
			}
		}
	}
}
 666:	df 91       	pop	r29
 668:	cf 91       	pop	r28
 66a:	08 95       	ret

Disassembly of section .text.LCD_sendCommand:

000006c8 <LCD_sendCommand>:
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
}

void LCD_sendCommand(uint8_t command)
{
 6c8:	cf 93       	push	r28
 6ca:	c8 2f       	mov	r28, r24
	//CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
	DIO_SetPinValue(LCD_CTRL_PORT, RS, LOW);
 6cc:	40 e0       	ldi	r20, 0x00	; 0
 6ce:	64 e0       	ldi	r22, 0x04	; 4
 6d0:	83 e0       	ldi	r24, 0x03	; 3
 6d2:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DIO_SetPinValue>
	
	//CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
	DIO_SetPinValue(LCD_CTRL_PORT, RW, LOW);
 6d6:	40 e0       	ldi	r20, 0x00	; 0
 6d8:	65 e0       	ldi	r22, 0x05	; 5
 6da:	83 e0       	ldi	r24, 0x03	; 3
 6dc:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DIO_SetPinValue>
	
	delay_us(1); /* delay for processing Tas = 50ns */
 6e0:	81 e0       	ldi	r24, 0x01	; 1
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	0e 94 47 02 	call	0x48e	; 0x48e <delay_us>
	
	//SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
	DIO_SetPinValue(LCD_CTRL_PORT, E, HIGH);
 6e8:	41 e0       	ldi	r20, 0x01	; 1
 6ea:	66 e0       	ldi	r22, 0x06	; 6
 6ec:	83 e0       	ldi	r24, 0x03	; 3
 6ee:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DIO_SetPinValue>
	
	delay_us(1); /* delay for processing Tpw - Tdws = 190ns */
 6f2:	81 e0       	ldi	r24, 0x01	; 1
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	0e 94 47 02 	call	0x48e	; 0x48e <delay_us>
	DIO_SetPinValue(LCD_CTRL_PORT, E, LOW);
	delay_us(1); /* delay for processing Th = 13ns */
	
#elif (DATA_BITS_MODE == 8)
	//LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
	DIO_SetPortValue(LCD_DATA_PORT, command);
 6fa:	6c 2f       	mov	r22, r28
 6fc:	82 e0       	ldi	r24, 0x02	; 2
 6fe:	0e 94 df 04 	call	0x9be	; 0x9be <DIO_SetPortValue>
	delay_us(1); /* delay for processing Tdsw = 100ns */
 702:	81 e0       	ldi	r24, 0x01	; 1
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	0e 94 47 02 	call	0x48e	; 0x48e <delay_us>
	//CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	DIO_SetPinValue(LCD_CTRL_PORT, E, LOW);
 70a:	40 e0       	ldi	r20, 0x00	; 0
 70c:	66 e0       	ldi	r22, 0x06	; 6
 70e:	83 e0       	ldi	r24, 0x03	; 3
 710:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DIO_SetPinValue>
	delay_us(1); /* delay for processing Th = 13ns */
 714:	81 e0       	ldi	r24, 0x01	; 1
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	0e 94 47 02 	call	0x48e	; 0x48e <delay_us>
#endif
}
 71c:	cf 91       	pop	r28
 71e:	08 95       	ret

Disassembly of section .text.LCD_init:

00000910 <LCD_init>:
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
//	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
	DIO_SetPinDirection(LCD_CTRL_PORT_DIR, E, OUTPUT);
 910:	41 e0       	ldi	r20, 0x01	; 1
 912:	66 e0       	ldi	r22, 0x06	; 6
 914:	83 e0       	ldi	r24, 0x03	; 3
 916:	0e 94 85 00 	call	0x10a	; 0x10a <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_CTRL_PORT_DIR, RS, OUTPUT);
 91a:	41 e0       	ldi	r20, 0x01	; 1
 91c:	64 e0       	ldi	r22, 0x04	; 4
 91e:	83 e0       	ldi	r24, 0x03	; 3
 920:	0e 94 85 00 	call	0x10a	; 0x10a <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_CTRL_PORT_DIR, RW, OUTPUT);
 924:	41 e0       	ldi	r20, 0x01	; 1
 926:	65 e0       	ldi	r22, 0x05	; 5
 928:	83 e0       	ldi	r24, 0x03	; 3
 92a:	0e 94 85 00 	call	0x10a	; 0x10a <DIO_SetPinDirection>
	
	DIO_SetPortValue(LCD_CTRL_PORT_DIR, 0x00);
 92e:	60 e0       	ldi	r22, 0x00	; 0
 930:	83 e0       	ldi	r24, 0x03	; 3
 932:	0e 94 df 04 	call	0x9be	; 0x9be <DIO_SetPortValue>
	DIO_SetPortValue(LCD_DATA_PORT_DIR, 0x00);
 936:	60 e0       	ldi	r22, 0x00	; 0
 938:	82 e0       	ldi	r24, 0x02	; 2
 93a:	0e 94 df 04 	call	0x9be	; 0x9be <DIO_SetPortValue>
		#endif
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
	#elif (DATA_BITS_MODE == 8)
		//LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */
		DIO_SetPortDirection(LCD_DATA_PORT_DIR, OUTPUT);
 93e:	61 e0       	ldi	r22, 0x01	; 1
 940:	82 e0       	ldi	r24, 0x02	; 2
 942:	0e 94 bc 03 	call	0x778	; 0x778 <DIO_SetPortDirection>
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
 946:	88 e3       	ldi	r24, 0x38	; 56
 948:	0e 94 64 03 	call	0x6c8	; 0x6c8 <LCD_sendCommand>
	#endif

	LCD_sendCommand(CURSOR_OFF); /* cursor off */
 94c:	8c e0       	ldi	r24, 0x0C	; 12
 94e:	0e 94 64 03 	call	0x6c8	; 0x6c8 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
 952:	81 e0       	ldi	r24, 0x01	; 1
 954:	0e 94 64 03 	call	0x6c8	; 0x6c8 <LCD_sendCommand>
 958:	08 95       	ret

Disassembly of section .text.LCD_displayCharacter:

00000720 <LCD_displayCharacter>:
	delay_us(1); /* delay for processing Th = 13ns */
#endif
}

void LCD_displayCharacter(uint8_t data)
{
 720:	cf 93       	push	r28
 722:	c8 2f       	mov	r28, r24
	//SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
	DIO_SetPinValue(LCD_CTRL_PORT, RS, HIGH);
 724:	41 e0       	ldi	r20, 0x01	; 1
 726:	64 e0       	ldi	r22, 0x04	; 4
 728:	83 e0       	ldi	r24, 0x03	; 3
 72a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DIO_SetPinValue>
	
	//CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
	DIO_SetPinValue(LCD_CTRL_PORT, RW, LOW);
 72e:	40 e0       	ldi	r20, 0x00	; 0
 730:	65 e0       	ldi	r22, 0x05	; 5
 732:	83 e0       	ldi	r24, 0x03	; 3
 734:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DIO_SetPinValue>
	
	delay_us(1); /* delay for processing Tas = 50ns */
 738:	81 e0       	ldi	r24, 0x01	; 1
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	0e 94 47 02 	call	0x48e	; 0x48e <delay_us>
	//SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    DIO_SetPinValue(LCD_CTRL_PORT, E, HIGH);
 740:	41 e0       	ldi	r20, 0x01	; 1
 742:	66 e0       	ldi	r22, 0x06	; 6
 744:	83 e0       	ldi	r24, 0x03	; 3
 746:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DIO_SetPinValue>
	
	delay_us(1); /* delay for processing Tpw - Tdws = 190ns */
 74a:	81 e0       	ldi	r24, 0x01	; 1
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	0e 94 47 02 	call	0x48e	; 0x48e <delay_us>
	DIO_SetPinValue(LCD_CTRL_PORT, E, LOW);
	
	delay_us(1); /* delay for processing Th = 13ns */
#elif (DATA_BITS_MODE == 8)
	//LCD_DATA_PORT = data; /* out the required command to the data bus D0 --> D7 */
	DIO_SetPortValue(LCD_DATA_PORT, data);
 752:	6c 2f       	mov	r22, r28
 754:	82 e0       	ldi	r24, 0x02	; 2
 756:	0e 94 df 04 	call	0x9be	; 0x9be <DIO_SetPortValue>
	delay_us(1); /* delay for processing Tdsw = 100ns */
 75a:	81 e0       	ldi	r24, 0x01	; 1
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	0e 94 47 02 	call	0x48e	; 0x48e <delay_us>
	
	//CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	DIO_SetPinValue(LCD_CTRL_PORT, E, LOW);
 762:	40 e0       	ldi	r20, 0x00	; 0
 764:	66 e0       	ldi	r22, 0x06	; 6
 766:	83 e0       	ldi	r24, 0x03	; 3
 768:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DIO_SetPinValue>
	delay_us(1); /* delay for processing Th = 13ns */
 76c:	81 e0       	ldi	r24, 0x01	; 1
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	0e 94 47 02 	call	0x48e	; 0x48e <delay_us>
#endif
}
 774:	cf 91       	pop	r28
 776:	08 95       	ret

Disassembly of section .text.LCD_displayString:

0000095a <LCD_displayString>:

void LCD_displayString(const char *Str)
{
 95a:	cf 92       	push	r12
 95c:	df 92       	push	r13
 95e:	ef 92       	push	r14
 960:	cf 93       	push	r28
 962:	6b 01       	movw	r12, r22
 964:	e8 2e       	mov	r14, r24
	uint8_t i = 0;
 966:	c0 e0       	ldi	r28, 0x00	; 0
	while(Str[i] != '\0')
 968:	03 c0       	rjmp	.+6      	; 0x970 <LCD_displayString+0x16>
	{
		LCD_displayCharacter(Str[i]);
 96a:	0e 94 90 03 	call	0x720	; 0x720 <LCD_displayCharacter>
		i++;
 96e:	cf 5f       	subi	r28, 0xFF	; 255
}

void LCD_displayString(const char *Str)
{
	uint8_t i = 0;
	while(Str[i] != '\0')
 970:	ae 2d       	mov	r26, r14
 972:	c6 01       	movw	r24, r12
 974:	8c 0f       	add	r24, r28
 976:	91 1d       	adc	r25, r1
 978:	a1 1d       	adc	r26, r1
 97a:	fc 01       	movw	r30, r24
 97c:	84 91       	lpm	r24, Z
 97e:	a7 fd       	sbrc	r26, 7
 980:	80 81       	ld	r24, Z
 982:	81 11       	cpse	r24, r1
 984:	f2 cf       	rjmp	.-28     	; 0x96a <LCD_displayString+0x10>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
 986:	cf 91       	pop	r28
 988:	ef 90       	pop	r14
 98a:	df 90       	pop	r13
 98c:	cf 90       	pop	r12
 98e:	08 95       	ret

Disassembly of section .text.LCD_goToRowColumn:

00000990 <LCD_goToRowColumn>:
void LCD_goToRowColumn(uint8_t row,uint8_t col)
	{
	uint8_t Address;

	/* first of all calculate the required address */
	switch(row)
 990:	81 30       	cpi	r24, 0x01	; 1
 992:	31 f0       	breq	.+12     	; 0x9a0 <LCD_goToRowColumn+0x10>
 994:	70 f0       	brcs	.+28     	; 0x9b2 <LCD_goToRowColumn+0x22>
 996:	82 30       	cpi	r24, 0x02	; 2
 998:	31 f0       	breq	.+12     	; 0x9a6 <LCD_goToRowColumn+0x16>
 99a:	83 30       	cpi	r24, 0x03	; 3
 99c:	39 f0       	breq	.+14     	; 0x9ac <LCD_goToRowColumn+0x1c>
 99e:	0a c0       	rjmp	.+20     	; 0x9b4 <LCD_goToRowColumn+0x24>
	{
		case 0:
				Address=col;
				break;
		case 1:
				Address=col+0x40;
 9a0:	90 e4       	ldi	r25, 0x40	; 64
 9a2:	96 0f       	add	r25, r22
				break;
 9a4:	07 c0       	rjmp	.+14     	; 0x9b4 <LCD_goToRowColumn+0x24>
		case 2:
				Address=col+0x10;
 9a6:	90 e1       	ldi	r25, 0x10	; 16
 9a8:	96 0f       	add	r25, r22
				break;
 9aa:	04 c0       	rjmp	.+8      	; 0x9b4 <LCD_goToRowColumn+0x24>
		case 3:
				Address=col+0x50;
 9ac:	90 e5       	ldi	r25, 0x50	; 80
 9ae:	96 0f       	add	r25, r22
				break;
 9b0:	01 c0       	rjmp	.+2      	; 0x9b4 <LCD_goToRowColumn+0x24>

	/* first of all calculate the required address */
	switch(row)
	{
		case 0:
				Address=col;
 9b2:	96 2f       	mov	r25, r22
				Address=col+0x50;
				break;
	}
	/* to write to a specific address in the LCD
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION);
 9b4:	89 2f       	mov	r24, r25
 9b6:	80 68       	ori	r24, 0x80	; 128
 9b8:	0e 94 64 03 	call	0x6c8	; 0x6c8 <LCD_sendCommand>
 9bc:	08 95       	ret

Disassembly of section .text.LCD_displayStringRowColumn:

000009de <LCD_displayStringRowColumn>:
}

void LCD_displayStringRowColumn(uint8_t row,uint8_t col,const char *Str)
{
 9de:	cf 92       	push	r12
 9e0:	df 92       	push	r13
 9e2:	ef 92       	push	r14
 9e4:	69 01       	movw	r12, r18
 9e6:	e4 2e       	mov	r14, r20
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
 9e8:	0e 94 c8 04 	call	0x990	; 0x990 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
 9ec:	8e 2d       	mov	r24, r14
 9ee:	b6 01       	movw	r22, r12
 9f0:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_displayString>
}
 9f4:	ef 90       	pop	r14
 9f6:	df 90       	pop	r13
 9f8:	cf 90       	pop	r12
 9fa:	08 95       	ret

Disassembly of section .text.LCD_clearScreen:

00000a18 <LCD_clearScreen>:
   LCD_displayString(buff);
}

void LCD_clearScreen(void)
{
	LCD_sendCommand(CLEAR_COMMAND); //clear display
 a18:	81 e0       	ldi	r24, 0x01	; 1
 a1a:	0e 94 64 03 	call	0x6c8	; 0x6c8 <LCD_sendCommand>
 a1e:	08 95       	ret

Disassembly of section .text.tostring:

00000592 <tostring>:
}


void tostring(uint8_t str[], uint8_t number)
{
 592:	cf 93       	push	r28
 594:	df 93       	push	r29
 596:	dc 01       	movw	r26, r24
	uint8_t iterator;
	uint8_t StringLength = 0 ;
	uint8_t IntegerNumber = number ;
 598:	96 2f       	mov	r25, r22


void tostring(uint8_t str[], uint8_t number)
{
	uint8_t iterator;
	uint8_t StringLength = 0 ;
 59a:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t IntegerNumber = number ;
	uint8_t remainder = 0;
	/* calculating length of the number */
	while(IntegerNumber != 0 )
 59c:	08 c0       	rjmp	.+16     	; 0x5ae <tostring+0x1c>
	{
		StringLength++;
 59e:	3f 5f       	subi	r19, 0xFF	; 255
		IntegerNumber /= 10;
 5a0:	8d ec       	ldi	r24, 0xCD	; 205
 5a2:	98 9f       	mul	r25, r24
 5a4:	91 2d       	mov	r25, r1
 5a6:	11 24       	eor	r1, r1
 5a8:	96 95       	lsr	r25
 5aa:	96 95       	lsr	r25
 5ac:	96 95       	lsr	r25
	uint8_t iterator;
	uint8_t StringLength = 0 ;
	uint8_t IntegerNumber = number ;
	uint8_t remainder = 0;
	/* calculating length of the number */
	while(IntegerNumber != 0 )
 5ae:	91 11       	cpse	r25, r1
 5b0:	f6 cf       	rjmp	.-20     	; 0x59e <tostring+0xc>
 5b2:	40 e0       	ldi	r20, 0x00	; 0
 5b4:	1f c0       	rjmp	.+62     	; 0x5f4 <tostring+0x62>
	}
	
	IntegerNumber = number;
	for(iterator = 0; iterator < StringLength; iterator++)
	{
		remainder =  IntegerNumber % 10;
 5b6:	2d ec       	ldi	r18, 0xCD	; 205
 5b8:	62 9f       	mul	r22, r18
 5ba:	21 2d       	mov	r18, r1
 5bc:	11 24       	eor	r1, r1
 5be:	92 2f       	mov	r25, r18
 5c0:	96 95       	lsr	r25
 5c2:	96 95       	lsr	r25
 5c4:	96 95       	lsr	r25
 5c6:	99 0f       	add	r25, r25
 5c8:	89 2f       	mov	r24, r25
 5ca:	88 0f       	add	r24, r24
 5cc:	88 0f       	add	r24, r24
 5ce:	98 0f       	add	r25, r24
 5d0:	69 1b       	sub	r22, r25
 5d2:	96 2f       	mov	r25, r22
		IntegerNumber = IntegerNumber /10;
 5d4:	62 2f       	mov	r22, r18
 5d6:	66 95       	lsr	r22
 5d8:	66 95       	lsr	r22
 5da:	66 95       	lsr	r22
		str[StringLength-(iterator+1)] = remainder + '0';   /* + '0' to convert number digit to character */
 5dc:	c4 2f       	mov	r28, r20
 5de:	d0 e0       	ldi	r29, 0x00	; 0
 5e0:	21 96       	adiw	r28, 0x01	; 1
 5e2:	e3 2f       	mov	r30, r19
 5e4:	f0 e0       	ldi	r31, 0x00	; 0
 5e6:	ec 1b       	sub	r30, r28
 5e8:	fd 0b       	sbc	r31, r29
 5ea:	ea 0f       	add	r30, r26
 5ec:	fb 1f       	adc	r31, r27
 5ee:	90 5d       	subi	r25, 0xD0	; 208
 5f0:	90 83       	st	Z, r25
		StringLength++;
		IntegerNumber /= 10;
	}
	
	IntegerNumber = number;
	for(iterator = 0; iterator < StringLength; iterator++)
 5f2:	4f 5f       	subi	r20, 0xFF	; 255
 5f4:	43 17       	cp	r20, r19
 5f6:	f8 f2       	brcs	.-66     	; 0x5b6 <tostring+0x24>
	{
		remainder =  IntegerNumber % 10;
		IntegerNumber = IntegerNumber /10;
		str[StringLength-(iterator+1)] = remainder + '0';   /* + '0' to convert number digit to character */
	}
	str[StringLength] = '\0';
 5f8:	a3 0f       	add	r26, r19
 5fa:	b1 1d       	adc	r27, r1
 5fc:	1c 92       	st	X, r1
 5fe:	df 91       	pop	r29
 600:	cf 91       	pop	r28
 602:	08 95       	ret

Disassembly of section .text.main:

000003c6 <main>:
#include "stdlib.h"



int main(void)
{
 3c6:	cf 93       	push	r28
 3c8:	df 93       	push	r29
 3ca:	cd b7       	in	r28, 0x3d	; 61
 3cc:	de b7       	in	r29, 0x3e	; 62
 3ce:	64 97       	sbiw	r28, 0x14	; 20
 3d0:	0f b6       	in	r0, 0x3f	; 63
 3d2:	f8 94       	cli
 3d4:	de bf       	out	0x3e, r29	; 62
 3d6:	0f be       	out	0x3f, r0	; 63
 3d8:	cd bf       	out	0x3d, r28	; 61
	LCD_init();
 3da:	0e 94 88 04 	call	0x910	; 0x910 <LCD_init>
	

	 DDRA = 0x00;
 3de:	1a ba       	out	0x1a, r1	; 26
	 PORTA = 0xFF;
 3e0:	8f ef       	ldi	r24, 0xFF	; 255
 3e2:	8b bb       	out	0x1b, r24	; 27
	 
	uint8_t BUFF[20]= {};
 3e4:	ce 01       	movw	r24, r28
 3e6:	01 96       	adiw	r24, 0x01	; 1
 3e8:	24 e1       	ldi	r18, 0x14	; 20
 3ea:	fc 01       	movw	r30, r24
 3ec:	11 92       	st	Z+, r1
 3ee:	2a 95       	dec	r18
 3f0:	e9 f7       	brne	.-6      	; 0x3ec <main+0x26>

	// uint8_t randomNumber =rand() % 15 ;
	 uint8_t randomNumber = 4;
	 uint16_t TimeOutCounter = 0;
	 uint8_t PressedKey ;
	 tostring(BUFF,randomNumber);
 3f2:	64 e0       	ldi	r22, 0x04	; 4
 3f4:	0e 94 c9 02 	call	0x592	; 0x592 <tostring>
#include "stdlib.h"



int main(void)
{
 3f8:	00 e0       	ldi	r16, 0x00	; 0
 3fa:	10 e0       	ldi	r17, 0x00	; 0
	 uint8_t PressedKey ;
	 tostring(BUFF,randomNumber);

    while(1)
    {
	    LCD_displayStringRowColumn(0,0,"Guess Number...");
 3fc:	24 ed       	ldi	r18, 0xD4	; 212
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	40 e0       	ldi	r20, 0x00	; 0
 402:	60 e0       	ldi	r22, 0x00	; 0
 404:	80 e0       	ldi	r24, 0x00	; 0
 406:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_displayStringRowColumn>
		 PressedKey = KeyPad_getPressedKey();
 40a:	0e 94 02 03 	call	0x604	; 0x604 <KeyPad_getPressedKey>
		 	
		if(PressedKey == randomNumber)
 40e:	84 30       	cpi	r24, 0x04	; 4
 410:	d1 f4       	brne	.+52     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
		{
	
			LCD_clearScreen();
 412:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"Winner...");
 416:	24 ee       	ldi	r18, 0xE4	; 228
 418:	30 e0       	ldi	r19, 0x00	; 0
 41a:	40 e0       	ldi	r20, 0x00	; 0
 41c:	60 e0       	ldi	r22, 0x00	; 0
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,0,BUFF);
 424:	9e 01       	movw	r18, r28
 426:	2f 5f       	subi	r18, 0xFF	; 255
 428:	3f 4f       	sbci	r19, 0xFF	; 255
 42a:	40 e8       	ldi	r20, 0x80	; 128
 42c:	60 e0       	ldi	r22, 0x00	; 0
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_displayStringRowColumn>
			
			TimeOutCounter= 0;
			
			delay_ms(2000);
 434:	80 ed       	ldi	r24, 0xD0	; 208
 436:	97 e0       	ldi	r25, 0x07	; 7
 438:	0e 94 89 02 	call	0x512	; 0x512 <delay_ms>
			LCD_clearScreen();
 43c:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_clearScreen>
	
			LCD_clearScreen();
			LCD_displayStringRowColumn(0,0,"Winner...");
			LCD_displayStringRowColumn(1,0,BUFF);
			
			TimeOutCounter= 0;
 440:	00 e0       	ldi	r16, 0x00	; 0
 442:	10 e0       	ldi	r17, 0x00	; 0
 444:	0f c0       	rjmp	.+30     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
			delay_ms(2000);
			LCD_clearScreen();
		}
		else
		{
			LCD_clearScreen();
 446:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"Loser...");
 44a:	2e ee       	ldi	r18, 0xEE	; 238
 44c:	30 e0       	ldi	r19, 0x00	; 0
 44e:	40 e0       	ldi	r20, 0x00	; 0
 450:	60 e0       	ldi	r22, 0x00	; 0
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_displayStringRowColumn>
			delay_ms(2000);
 458:	80 ed       	ldi	r24, 0xD0	; 208
 45a:	97 e0       	ldi	r25, 0x07	; 7
 45c:	0e 94 89 02 	call	0x512	; 0x512 <delay_ms>
			LCD_clearScreen();			
 460:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_clearScreen>
		}
		TimeOutCounter++;
 464:	0f 5f       	subi	r16, 0xFF	; 255
 466:	1f 4f       	sbci	r17, 0xFF	; 255
		if(TimeOutCounter == 100 )
 468:	04 36       	cpi	r16, 0x64	; 100
 46a:	11 05       	cpc	r17, r1
 46c:	39 f6       	brne	.-114    	; 0x3fc <main+0x36>
		{
			LCD_clearScreen();
 46e:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"Time out Loser...");
 472:	27 ef       	ldi	r18, 0xF7	; 247
 474:	30 e0       	ldi	r19, 0x00	; 0
 476:	40 e0       	ldi	r20, 0x00	; 0
 478:	60 e0       	ldi	r22, 0x00	; 0
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_displayStringRowColumn>
			delay_ms(2000);
 480:	80 ed       	ldi	r24, 0xD0	; 208
 482:	97 e0       	ldi	r25, 0x07	; 7
 484:	0e 94 89 02 	call	0x512	; 0x512 <delay_ms>
			LCD_clearScreen();
 488:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_clearScreen>
 48c:	b5 cf       	rjmp	.-150    	; 0x3f8 <main+0x32>

Disassembly of section .text.DIO_SetPinDirection:

0000010a <DIO_SetPinDirection>:
		case portC :
			TOGGLE_BIT(PORTC_REG , PinNumber) ;
			break ;
			
		case portD :
			TOGGLE_BIT(PORTD_REG , PinNumber) ;
 10a:	81 30       	cpi	r24, 0x01	; 1
 10c:	11 f1       	breq	.+68     	; 0x152 <DIO_SetPinDirection+0x48>
 10e:	30 f0       	brcs	.+12     	; 0x11c <DIO_SetPinDirection+0x12>
 110:	82 30       	cpi	r24, 0x02	; 2
 112:	d1 f1       	breq	.+116    	; 0x188 <DIO_SetPinDirection+0x7e>
 114:	83 30       	cpi	r24, 0x03	; 3
 116:	09 f4       	brne	.+2      	; 0x11a <DIO_SetPinDirection+0x10>
 118:	52 c0       	rjmp	.+164    	; 0x1be <DIO_SetPinDirection+0xb4>
 11a:	08 95       	ret
 11c:	41 30       	cpi	r20, 0x01	; 1
 11e:	59 f4       	brne	.+22     	; 0x136 <DIO_SetPinDirection+0x2c>
 120:	2a b3       	in	r18, 0x1a	; 26
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	02 c0       	rjmp	.+4      	; 0x12c <DIO_SetPinDirection+0x22>
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	6a 95       	dec	r22
 12e:	e2 f7       	brpl	.-8      	; 0x128 <DIO_SetPinDirection+0x1e>
 130:	82 2b       	or	r24, r18
 132:	8a bb       	out	0x1a, r24	; 26
 134:	08 95       	ret
 136:	41 11       	cpse	r20, r1
 138:	5c c0       	rjmp	.+184    	; 0x1f2 <DIO_SetPinDirection+0xe8>
 13a:	2a b3       	in	r18, 0x1a	; 26
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	02 c0       	rjmp	.+4      	; 0x146 <DIO_SetPinDirection+0x3c>
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	6a 95       	dec	r22
 148:	e2 f7       	brpl	.-8      	; 0x142 <DIO_SetPinDirection+0x38>
 14a:	80 95       	com	r24
 14c:	82 23       	and	r24, r18
 14e:	8a bb       	out	0x1a, r24	; 26
 150:	08 95       	ret
 152:	41 30       	cpi	r20, 0x01	; 1
 154:	59 f4       	brne	.+22     	; 0x16c <DIO_SetPinDirection+0x62>
 156:	27 b3       	in	r18, 0x17	; 23
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_SetPinDirection+0x58>
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	6a 95       	dec	r22
 164:	e2 f7       	brpl	.-8      	; 0x15e <DIO_SetPinDirection+0x54>
 166:	82 2b       	or	r24, r18
 168:	87 bb       	out	0x17, r24	; 23
 16a:	08 95       	ret
 16c:	41 11       	cpse	r20, r1
 16e:	41 c0       	rjmp	.+130    	; 0x1f2 <DIO_SetPinDirection+0xe8>
 170:	27 b3       	in	r18, 0x17	; 23
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_SetPinDirection+0x72>
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	6a 95       	dec	r22
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_SetPinDirection+0x6e>
 180:	80 95       	com	r24
 182:	82 23       	and	r24, r18
 184:	87 bb       	out	0x17, r24	; 23
 186:	08 95       	ret
 188:	41 30       	cpi	r20, 0x01	; 1
 18a:	59 f4       	brne	.+22     	; 0x1a2 <DIO_SetPinDirection+0x98>
 18c:	24 b3       	in	r18, 0x14	; 20
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_SetPinDirection+0x8e>
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	6a 95       	dec	r22
 19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_SetPinDirection+0x8a>
 19c:	82 2b       	or	r24, r18
 19e:	84 bb       	out	0x14, r24	; 20
 1a0:	08 95       	ret
 1a2:	41 11       	cpse	r20, r1
 1a4:	26 c0       	rjmp	.+76     	; 0x1f2 <DIO_SetPinDirection+0xe8>
 1a6:	24 b3       	in	r18, 0x14	; 20
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <DIO_SetPinDirection+0xa8>
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	6a 95       	dec	r22
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <DIO_SetPinDirection+0xa4>
 1b6:	80 95       	com	r24
 1b8:	82 23       	and	r24, r18
 1ba:	84 bb       	out	0x14, r24	; 20
 1bc:	08 95       	ret
 1be:	41 30       	cpi	r20, 0x01	; 1
 1c0:	59 f4       	brne	.+22     	; 0x1d8 <DIO_SetPinDirection+0xce>
 1c2:	21 b3       	in	r18, 0x11	; 17
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <DIO_SetPinDirection+0xc4>
 1ca:	88 0f       	add	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	6a 95       	dec	r22
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <DIO_SetPinDirection+0xc0>
 1d2:	82 2b       	or	r24, r18
 1d4:	81 bb       	out	0x11, r24	; 17
 1d6:	08 95       	ret
 1d8:	41 11       	cpse	r20, r1
 1da:	0b c0       	rjmp	.+22     	; 0x1f2 <DIO_SetPinDirection+0xe8>
 1dc:	21 b3       	in	r18, 0x11	; 17
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <DIO_SetPinDirection+0xde>
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	6a 95       	dec	r22
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <DIO_SetPinDirection+0xda>
 1ec:	80 95       	com	r24
 1ee:	82 23       	and	r24, r18
 1f0:	81 bb       	out	0x11, r24	; 17
 1f2:	08 95       	ret

Disassembly of section .text.DIO_SetPinValue:

000001f4 <DIO_SetPinValue>:
 1f4:	81 30       	cpi	r24, 0x01	; 1
 1f6:	11 f1       	breq	.+68     	; 0x23c <DIO_SetPinValue+0x48>
 1f8:	30 f0       	brcs	.+12     	; 0x206 <DIO_SetPinValue+0x12>
 1fa:	82 30       	cpi	r24, 0x02	; 2
 1fc:	d1 f1       	breq	.+116    	; 0x272 <DIO_SetPinValue+0x7e>
 1fe:	83 30       	cpi	r24, 0x03	; 3
 200:	09 f4       	brne	.+2      	; 0x204 <DIO_SetPinValue+0x10>
 202:	52 c0       	rjmp	.+164    	; 0x2a8 <DIO_SetPinValue+0xb4>
 204:	08 95       	ret
 206:	41 30       	cpi	r20, 0x01	; 1
 208:	59 f4       	brne	.+22     	; 0x220 <DIO_SetPinValue+0x2c>
 20a:	2b b3       	in	r18, 0x1b	; 27
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_SetPinValue+0x22>
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	6a 95       	dec	r22
 218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_SetPinValue+0x1e>
 21a:	82 2b       	or	r24, r18
 21c:	8b bb       	out	0x1b, r24	; 27
 21e:	08 95       	ret
 220:	41 11       	cpse	r20, r1
 222:	5c c0       	rjmp	.+184    	; 0x2dc <DIO_SetPinValue+0xe8>
 224:	2b b3       	in	r18, 0x1b	; 27
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_SetPinValue+0x3c>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	6a 95       	dec	r22
 232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_SetPinValue+0x38>
 234:	80 95       	com	r24
 236:	82 23       	and	r24, r18
 238:	8b bb       	out	0x1b, r24	; 27
 23a:	08 95       	ret
 23c:	41 30       	cpi	r20, 0x01	; 1
 23e:	59 f4       	brne	.+22     	; 0x256 <DIO_SetPinValue+0x62>
 240:	28 b3       	in	r18, 0x18	; 24
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_SetPinValue+0x58>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	6a 95       	dec	r22
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_SetPinValue+0x54>
 250:	82 2b       	or	r24, r18
 252:	88 bb       	out	0x18, r24	; 24
 254:	08 95       	ret
 256:	41 11       	cpse	r20, r1
 258:	41 c0       	rjmp	.+130    	; 0x2dc <DIO_SetPinValue+0xe8>
 25a:	28 b3       	in	r18, 0x18	; 24
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	02 c0       	rjmp	.+4      	; 0x266 <DIO_SetPinValue+0x72>
 262:	88 0f       	add	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	6a 95       	dec	r22
 268:	e2 f7       	brpl	.-8      	; 0x262 <DIO_SetPinValue+0x6e>
 26a:	80 95       	com	r24
 26c:	82 23       	and	r24, r18
 26e:	88 bb       	out	0x18, r24	; 24
 270:	08 95       	ret
 272:	41 30       	cpi	r20, 0x01	; 1
 274:	59 f4       	brne	.+22     	; 0x28c <DIO_SetPinValue+0x98>
 276:	25 b3       	in	r18, 0x15	; 21
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	02 c0       	rjmp	.+4      	; 0x282 <DIO_SetPinValue+0x8e>
 27e:	88 0f       	add	r24, r24
 280:	99 1f       	adc	r25, r25
 282:	6a 95       	dec	r22
 284:	e2 f7       	brpl	.-8      	; 0x27e <DIO_SetPinValue+0x8a>
 286:	82 2b       	or	r24, r18
 288:	85 bb       	out	0x15, r24	; 21
 28a:	08 95       	ret
 28c:	41 11       	cpse	r20, r1
 28e:	26 c0       	rjmp	.+76     	; 0x2dc <DIO_SetPinValue+0xe8>
 290:	25 b3       	in	r18, 0x15	; 21
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	02 c0       	rjmp	.+4      	; 0x29c <DIO_SetPinValue+0xa8>
 298:	88 0f       	add	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	6a 95       	dec	r22
 29e:	e2 f7       	brpl	.-8      	; 0x298 <DIO_SetPinValue+0xa4>
 2a0:	80 95       	com	r24
 2a2:	82 23       	and	r24, r18
 2a4:	85 bb       	out	0x15, r24	; 21
 2a6:	08 95       	ret
 2a8:	41 30       	cpi	r20, 0x01	; 1
 2aa:	59 f4       	brne	.+22     	; 0x2c2 <DIO_SetPinValue+0xce>
 2ac:	22 b3       	in	r18, 0x12	; 18
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <DIO_SetPinValue+0xc4>
 2b4:	88 0f       	add	r24, r24
 2b6:	99 1f       	adc	r25, r25
 2b8:	6a 95       	dec	r22
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <DIO_SetPinValue+0xc0>
 2bc:	82 2b       	or	r24, r18
 2be:	82 bb       	out	0x12, r24	; 18
 2c0:	08 95       	ret
 2c2:	41 11       	cpse	r20, r1
 2c4:	0b c0       	rjmp	.+22     	; 0x2dc <DIO_SetPinValue+0xe8>
 2c6:	22 b3       	in	r18, 0x12	; 18
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <DIO_SetPinValue+0xde>
 2ce:	88 0f       	add	r24, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	6a 95       	dec	r22
 2d4:	e2 f7       	brpl	.-8      	; 0x2ce <DIO_SetPinValue+0xda>
 2d6:	80 95       	com	r24
 2d8:	82 23       	and	r24, r18
 2da:	82 bb       	out	0x12, r24	; 18
 2dc:	08 95       	ret

Disassembly of section .text.DIO_SetPortDirection:

00000778 <DIO_SetPortDirection>:
			break ;
	}
}

void DIO_SetPortDirection (uint8_t PortNumber , uint8_t Direction) {
	switch(PortNumber) {
 778:	81 30       	cpi	r24, 0x01	; 1
 77a:	79 f0       	breq	.+30     	; 0x79a <DIO_SetPortDirection+0x22>
 77c:	28 f0       	brcs	.+10     	; 0x788 <DIO_SetPortDirection+0x10>
 77e:	82 30       	cpi	r24, 0x02	; 2
 780:	a9 f0       	breq	.+42     	; 0x7ac <DIO_SetPortDirection+0x34>
 782:	83 30       	cpi	r24, 0x03	; 3
 784:	e1 f0       	breq	.+56     	; 0x7be <DIO_SetPortDirection+0x46>
 786:	08 95       	ret
		case portA : 
			if (Direction == OUTPUT) {
 788:	61 30       	cpi	r22, 0x01	; 1
 78a:	19 f4       	brne	.+6      	; 0x792 <DIO_SetPortDirection+0x1a>
				DDRA_REG = 0xff ; 
 78c:	8f ef       	ldi	r24, 0xFF	; 255
 78e:	8a bb       	out	0x1a, r24	; 26
 790:	08 95       	ret
			}
			else if (Direction == INPUT) {
 792:	61 11       	cpse	r22, r1
 794:	1c c0       	rjmp	.+56     	; 0x7ce <DIO_SetPortDirection+0x56>
				DDRA_REG = 0x00 ; 
 796:	1a ba       	out	0x1a, r1	; 26
 798:	08 95       	ret
			}
		break;
		
		case portB :
			if (Direction == OUTPUT) {
 79a:	61 30       	cpi	r22, 0x01	; 1
 79c:	19 f4       	brne	.+6      	; 0x7a4 <DIO_SetPortDirection+0x2c>
				DDRB_REG = 0xff ;
 79e:	8f ef       	ldi	r24, 0xFF	; 255
 7a0:	87 bb       	out	0x17, r24	; 23
 7a2:	08 95       	ret
			}
			else if (Direction == INPUT) {
 7a4:	61 11       	cpse	r22, r1
 7a6:	13 c0       	rjmp	.+38     	; 0x7ce <DIO_SetPortDirection+0x56>
				DDRB_REG = 0x00 ;
 7a8:	17 ba       	out	0x17, r1	; 23
 7aa:	08 95       	ret
			}
		break;
		
		case portC :
			if (Direction == OUTPUT) {
 7ac:	61 30       	cpi	r22, 0x01	; 1
 7ae:	19 f4       	brne	.+6      	; 0x7b6 <DIO_SetPortDirection+0x3e>
				DDRC_REG = 0xff ;
 7b0:	8f ef       	ldi	r24, 0xFF	; 255
 7b2:	84 bb       	out	0x14, r24	; 20
 7b4:	08 95       	ret
			}
			else if (Direction == INPUT) {
 7b6:	61 11       	cpse	r22, r1
 7b8:	0a c0       	rjmp	.+20     	; 0x7ce <DIO_SetPortDirection+0x56>
				DDRC_REG = 0x00 ;
 7ba:	14 ba       	out	0x14, r1	; 20
 7bc:	08 95       	ret
			}	
		break;
		
		case portD :
			if (Direction == OUTPUT) {
 7be:	61 30       	cpi	r22, 0x01	; 1
 7c0:	19 f4       	brne	.+6      	; 0x7c8 <DIO_SetPortDirection+0x50>
				DDRD_REG = 0xff ;
 7c2:	8f ef       	ldi	r24, 0xFF	; 255
 7c4:	81 bb       	out	0x11, r24	; 17
 7c6:	08 95       	ret
			}
			else if (Direction == INPUT) {
 7c8:	61 11       	cpse	r22, r1
 7ca:	01 c0       	rjmp	.+2      	; 0x7ce <DIO_SetPortDirection+0x56>
				DDRD_REG = 0x00 ;
 7cc:	11 ba       	out	0x11, r1	; 17
 7ce:	08 95       	ret

Disassembly of section .text.DIO_SetPortValue:

000009be <DIO_SetPortValue>:
			break;
	}
}

void DIO_SetPortValue (uint8_t PortNumber , uint8_t Value) {
	switch(PortNumber) {
 9be:	81 30       	cpi	r24, 0x01	; 1
 9c0:	41 f0       	breq	.+16     	; 0x9d2 <DIO_SetPortValue+0x14>
 9c2:	28 f0       	brcs	.+10     	; 0x9ce <DIO_SetPortValue+0x10>
 9c4:	82 30       	cpi	r24, 0x02	; 2
 9c6:	39 f0       	breq	.+14     	; 0x9d6 <DIO_SetPortValue+0x18>
 9c8:	83 30       	cpi	r24, 0x03	; 3
 9ca:	39 f0       	breq	.+14     	; 0x9da <DIO_SetPortValue+0x1c>
 9cc:	08 95       	ret
		case portA :
			PORTA_REG = Value ; 
 9ce:	6b bb       	out	0x1b, r22	; 27
		break;
 9d0:	08 95       	ret
		
		case portB :
			PORTB_REG = Value ; 
 9d2:	68 bb       	out	0x18, r22	; 24
		break;
 9d4:	08 95       	ret
		
		case portC :
			PORTC_REG = Value ; 
 9d6:	65 bb       	out	0x15, r22	; 21
		break;
 9d8:	08 95       	ret
		
		case portD :
			PORTD_REG = Value ; 
 9da:	62 bb       	out	0x12, r22	; 18
 9dc:	08 95       	ret

Disassembly of section .text.DIO_GetPinValue:

0000066c <DIO_GetPinValue>:
		case portC :
			TOGGLE_BIT(PORTC_REG , PinNumber) ;
			break ;
			
		case portD :
			TOGGLE_BIT(PORTD_REG , PinNumber) ;
 66c:	81 30       	cpi	r24, 0x01	; 1
 66e:	79 f0       	breq	.+30     	; 0x68e <DIO_GetPinValue+0x22>
 670:	28 f0       	brcs	.+10     	; 0x67c <DIO_GetPinValue+0x10>
 672:	82 30       	cpi	r24, 0x02	; 2
 674:	a9 f0       	breq	.+42     	; 0x6a0 <DIO_GetPinValue+0x34>
 676:	83 30       	cpi	r24, 0x03	; 3
 678:	e1 f0       	breq	.+56     	; 0x6b2 <DIO_GetPinValue+0x46>
 67a:	24 c0       	rjmp	.+72     	; 0x6c4 <DIO_GetPinValue+0x58>
 67c:	89 b3       	in	r24, 0x19	; 25
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	02 c0       	rjmp	.+4      	; 0x686 <DIO_GetPinValue+0x1a>
 682:	95 95       	asr	r25
 684:	87 95       	ror	r24
 686:	6a 95       	dec	r22
 688:	e2 f7       	brpl	.-8      	; 0x682 <DIO_GetPinValue+0x16>
 68a:	81 70       	andi	r24, 0x01	; 1
 68c:	08 95       	ret
 68e:	86 b3       	in	r24, 0x16	; 22
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	02 c0       	rjmp	.+4      	; 0x698 <DIO_GetPinValue+0x2c>
 694:	95 95       	asr	r25
 696:	87 95       	ror	r24
 698:	6a 95       	dec	r22
 69a:	e2 f7       	brpl	.-8      	; 0x694 <DIO_GetPinValue+0x28>
 69c:	81 70       	andi	r24, 0x01	; 1
 69e:	08 95       	ret
 6a0:	83 b3       	in	r24, 0x13	; 19
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	02 c0       	rjmp	.+4      	; 0x6aa <DIO_GetPinValue+0x3e>
 6a6:	95 95       	asr	r25
 6a8:	87 95       	ror	r24
 6aa:	6a 95       	dec	r22
 6ac:	e2 f7       	brpl	.-8      	; 0x6a6 <DIO_GetPinValue+0x3a>
 6ae:	81 70       	andi	r24, 0x01	; 1
 6b0:	08 95       	ret
 6b2:	80 b3       	in	r24, 0x10	; 16
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	02 c0       	rjmp	.+4      	; 0x6bc <DIO_GetPinValue+0x50>
 6b8:	95 95       	asr	r25
 6ba:	87 95       	ror	r24
 6bc:	6a 95       	dec	r22
 6be:	e2 f7       	brpl	.-8      	; 0x6b8 <DIO_GetPinValue+0x4c>
 6c0:	81 70       	andi	r24, 0x01	; 1
 6c2:	08 95       	ret
 6c4:	80 e0       	ldi	r24, 0x00	; 0
 6c6:	08 95       	ret

Disassembly of section .text.__vector_10:

00000826 <__vector_10>:
uint8_t Timer2_OV_flag()
{
	while(BIT_IS_CLEAR(TIFR,TOV2));
	SET_BIT(TIFR,TOV2);
	return 1;
}
 826:	1f 92       	push	r1
 828:	0f 92       	push	r0
 82a:	0f b6       	in	r0, 0x3f	; 63
 82c:	0f 92       	push	r0
 82e:	11 24       	eor	r1, r1
 830:	2f 93       	push	r18
 832:	3f 93       	push	r19
 834:	4f 93       	push	r20
 836:	5f 93       	push	r21
 838:	6f 93       	push	r22
 83a:	7f 93       	push	r23
 83c:	8f 93       	push	r24
 83e:	9f 93       	push	r25
 840:	af 93       	push	r26
 842:	bf 93       	push	r27
 844:	ef 93       	push	r30
 846:	ff 93       	push	r31
 848:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <g_callBackPtrTimer0CTC>
 84c:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <g_callBackPtrTimer0CTC+0x1>
 850:	09 95       	icall
 852:	ff 91       	pop	r31
 854:	ef 91       	pop	r30
 856:	bf 91       	pop	r27
 858:	af 91       	pop	r26
 85a:	9f 91       	pop	r25
 85c:	8f 91       	pop	r24
 85e:	7f 91       	pop	r23
 860:	6f 91       	pop	r22
 862:	5f 91       	pop	r21
 864:	4f 91       	pop	r20
 866:	3f 91       	pop	r19
 868:	2f 91       	pop	r18
 86a:	0f 90       	pop	r0
 86c:	0f be       	out	0x3f, r0	; 63
 86e:	0f 90       	pop	r0
 870:	1f 90       	pop	r1
 872:	18 95       	reti

Disassembly of section .text.__vector_4:

00000874 <__vector_4>:
 874:	1f 92       	push	r1
 876:	0f 92       	push	r0
 878:	0f b6       	in	r0, 0x3f	; 63
 87a:	0f 92       	push	r0
 87c:	11 24       	eor	r1, r1
 87e:	2f 93       	push	r18
 880:	3f 93       	push	r19
 882:	4f 93       	push	r20
 884:	5f 93       	push	r21
 886:	6f 93       	push	r22
 888:	7f 93       	push	r23
 88a:	8f 93       	push	r24
 88c:	9f 93       	push	r25
 88e:	af 93       	push	r26
 890:	bf 93       	push	r27
 892:	ef 93       	push	r30
 894:	ff 93       	push	r31
 896:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <g_callBackPtrTimer2CTC>
 89a:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <g_callBackPtrTimer2CTC+0x1>
 89e:	09 95       	icall
 8a0:	ff 91       	pop	r31
 8a2:	ef 91       	pop	r30
 8a4:	bf 91       	pop	r27
 8a6:	af 91       	pop	r26
 8a8:	9f 91       	pop	r25
 8aa:	8f 91       	pop	r24
 8ac:	7f 91       	pop	r23
 8ae:	6f 91       	pop	r22
 8b0:	5f 91       	pop	r21
 8b2:	4f 91       	pop	r20
 8b4:	3f 91       	pop	r19
 8b6:	2f 91       	pop	r18
 8b8:	0f 90       	pop	r0
 8ba:	0f be       	out	0x3f, r0	; 63
 8bc:	0f 90       	pop	r0
 8be:	1f 90       	pop	r1
 8c0:	18 95       	reti

Disassembly of section .text.__vector_7:

000008c2 <__vector_7>:
 8c2:	1f 92       	push	r1
 8c4:	0f 92       	push	r0
 8c6:	0f b6       	in	r0, 0x3f	; 63
 8c8:	0f 92       	push	r0
 8ca:	11 24       	eor	r1, r1
 8cc:	2f 93       	push	r18
 8ce:	3f 93       	push	r19
 8d0:	4f 93       	push	r20
 8d2:	5f 93       	push	r21
 8d4:	6f 93       	push	r22
 8d6:	7f 93       	push	r23
 8d8:	8f 93       	push	r24
 8da:	9f 93       	push	r25
 8dc:	af 93       	push	r26
 8de:	bf 93       	push	r27
 8e0:	ef 93       	push	r30
 8e2:	ff 93       	push	r31
 8e4:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <g_callBackPtrTimer1COMPA>
 8e8:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <g_callBackPtrTimer1COMPA+0x1>
 8ec:	09 95       	icall
 8ee:	ff 91       	pop	r31
 8f0:	ef 91       	pop	r30
 8f2:	bf 91       	pop	r27
 8f4:	af 91       	pop	r26
 8f6:	9f 91       	pop	r25
 8f8:	8f 91       	pop	r24
 8fa:	7f 91       	pop	r23
 8fc:	6f 91       	pop	r22
 8fe:	5f 91       	pop	r21
 900:	4f 91       	pop	r20
 902:	3f 91       	pop	r19
 904:	2f 91       	pop	r18
 906:	0f 90       	pop	r0
 908:	0f be       	out	0x3f, r0	; 63
 90a:	0f 90       	pop	r0
 90c:	1f 90       	pop	r1
 90e:	18 95       	reti

Disassembly of section .text.Timer_start:

000002de <Timer_start>:
 2de:	fc 01       	movw	r30, r24
 2e0:	80 81       	ld	r24, Z
 2e2:	81 30       	cpi	r24, 0x01	; 1
 2e4:	c1 f1       	breq	.+112    	; 0x356 <Timer_start+0x78>
 2e6:	18 f0       	brcs	.+6      	; 0x2ee <Timer_start+0x10>
 2e8:	82 30       	cpi	r24, 0x02	; 2
 2ea:	e1 f0       	breq	.+56     	; 0x324 <Timer_start+0x46>
 2ec:	08 95       	ret
 2ee:	93 b7       	in	r25, 0x33	; 51
 2f0:	81 81       	ldd	r24, Z+1	; 0x01
 2f2:	89 2b       	or	r24, r25
 2f4:	83 bf       	out	0x33, r24	; 51
 2f6:	93 b7       	in	r25, 0x33	; 51
 2f8:	82 81       	ldd	r24, Z+2	; 0x02
 2fa:	87 70       	andi	r24, 0x07	; 7
 2fc:	89 2b       	or	r24, r25
 2fe:	83 bf       	out	0x33, r24	; 51
 300:	83 81       	ldd	r24, Z+3	; 0x03
 302:	82 bf       	out	0x32, r24	; 50
 304:	85 81       	ldd	r24, Z+5	; 0x05
 306:	8c bf       	out	0x3c, r24	; 60
 308:	8f b7       	in	r24, 0x3f	; 63
 30a:	80 68       	ori	r24, 0x80	; 128
 30c:	8f bf       	out	0x3f, r24	; 63
 30e:	03 b6       	in	r0, 0x33	; 51
 310:	03 fe       	sbrs	r0, 3
 312:	04 c0       	rjmp	.+8      	; 0x31c <Timer_start+0x3e>
 314:	89 b7       	in	r24, 0x39	; 57
 316:	82 60       	ori	r24, 0x02	; 2
 318:	89 bf       	out	0x39, r24	; 57
 31a:	08 95       	ret
 31c:	89 b7       	in	r24, 0x39	; 57
 31e:	81 60       	ori	r24, 0x01	; 1
 320:	89 bf       	out	0x39, r24	; 57
 322:	08 95       	ret
 324:	81 81       	ldd	r24, Z+1	; 0x01
 326:	85 bd       	out	0x25, r24	; 37
 328:	95 b5       	in	r25, 0x25	; 37
 32a:	82 81       	ldd	r24, Z+2	; 0x02
 32c:	87 70       	andi	r24, 0x07	; 7
 32e:	89 2b       	or	r24, r25
 330:	85 bd       	out	0x25, r24	; 37
 332:	83 81       	ldd	r24, Z+3	; 0x03
 334:	84 bd       	out	0x24, r24	; 36
 336:	85 81       	ldd	r24, Z+5	; 0x05
 338:	83 bd       	out	0x23, r24	; 35
 33a:	8f b7       	in	r24, 0x3f	; 63
 33c:	80 68       	ori	r24, 0x80	; 128
 33e:	8f bf       	out	0x3f, r24	; 63
 340:	05 b4       	in	r0, 0x25	; 37
 342:	03 fe       	sbrs	r0, 3
 344:	04 c0       	rjmp	.+8      	; 0x34e <Timer_start+0x70>
 346:	89 b7       	in	r24, 0x39	; 57
 348:	80 68       	ori	r24, 0x80	; 128
 34a:	89 bf       	out	0x39, r24	; 57
 34c:	08 95       	ret
 34e:	89 b7       	in	r24, 0x39	; 57
 350:	80 64       	ori	r24, 0x40	; 64
 352:	89 bf       	out	0x39, r24	; 57
 354:	08 95       	ret
 356:	83 81       	ldd	r24, Z+3	; 0x03
 358:	8c b9       	out	0x0c, r24	; 12
 35a:	81 81       	ldd	r24, Z+1	; 0x01
 35c:	80 38       	cpi	r24, 0x80	; 128
 35e:	69 f4       	brne	.+26     	; 0x37a <Timer_start+0x9c>
 360:	8f b7       	in	r24, 0x3f	; 63
 362:	80 68       	ori	r24, 0x80	; 128
 364:	8f bf       	out	0x3f, r24	; 63
 366:	89 b7       	in	r24, 0x39	; 57
 368:	84 60       	ori	r24, 0x04	; 4
 36a:	89 bf       	out	0x39, r24	; 57
 36c:	8c e0       	ldi	r24, 0x0C	; 12
 36e:	8f bd       	out	0x2f, r24	; 47
 370:	9e b5       	in	r25, 0x2e	; 46
 372:	82 81       	ldd	r24, Z+2	; 0x02
 374:	89 2b       	or	r24, r25
 376:	8e bd       	out	0x2e, r24	; 46
 378:	08 95       	ret
 37a:	88 38       	cpi	r24, 0x88	; 136
 37c:	19 f5       	brne	.+70     	; 0x3c4 <Timer_start+0xe6>
 37e:	8c e0       	ldi	r24, 0x0C	; 12
 380:	8f bd       	out	0x2f, r24	; 47
 382:	8e b5       	in	r24, 0x2e	; 46
 384:	88 60       	ori	r24, 0x08	; 8
 386:	8e bd       	out	0x2e, r24	; 46
 388:	87 81       	ldd	r24, Z+7	; 0x07
 38a:	81 11       	cpse	r24, r1
 38c:	0b c0       	rjmp	.+22     	; 0x3a4 <Timer_start+0xc6>
 38e:	8f b7       	in	r24, 0x3f	; 63
 390:	80 68       	ori	r24, 0x80	; 128
 392:	8f bf       	out	0x3f, r24	; 63
 394:	89 b7       	in	r24, 0x39	; 57
 396:	80 61       	ori	r24, 0x10	; 16
 398:	89 bf       	out	0x39, r24	; 57
 39a:	85 81       	ldd	r24, Z+5	; 0x05
 39c:	8a bd       	out	0x2a, r24	; 42
 39e:	86 81       	ldd	r24, Z+6	; 0x06
 3a0:	8b bd       	out	0x2b, r24	; 43
 3a2:	0c c0       	rjmp	.+24     	; 0x3bc <Timer_start+0xde>
 3a4:	81 30       	cpi	r24, 0x01	; 1
 3a6:	51 f4       	brne	.+20     	; 0x3bc <Timer_start+0xde>
 3a8:	8f b7       	in	r24, 0x3f	; 63
 3aa:	80 68       	ori	r24, 0x80	; 128
 3ac:	8f bf       	out	0x3f, r24	; 63
 3ae:	89 b7       	in	r24, 0x39	; 57
 3b0:	88 60       	ori	r24, 0x08	; 8
 3b2:	89 bf       	out	0x39, r24	; 57
 3b4:	85 81       	ldd	r24, Z+5	; 0x05
 3b6:	8a bd       	out	0x2a, r24	; 42
 3b8:	86 81       	ldd	r24, Z+6	; 0x06
 3ba:	8b bd       	out	0x2b, r24	; 43
 3bc:	9e b5       	in	r25, 0x2e	; 46
 3be:	82 81       	ldd	r24, Z+2	; 0x02
 3c0:	89 2b       	or	r24, r25
 3c2:	8e bd       	out	0x2e, r24	; 46
 3c4:	08 95       	ret

Disassembly of section .text.Timer1A_CTC_flag:

000009fc <Timer1A_CTC_flag>:


uint8_t Timer1A_CTC_flag()
{
	while(BIT_IS_CLEAR(TIFR,OCF1A));
 9fc:	08 b6       	in	r0, 0x38	; 56
 9fe:	04 fe       	sbrs	r0, 4
 a00:	fd cf       	rjmp	.-6      	; 0x9fc <Timer1A_CTC_flag>
	SET_BIT(TIFR,OCF1A);
 a02:	88 b7       	in	r24, 0x38	; 56
 a04:	80 61       	ori	r24, 0x10	; 16
 a06:	88 bf       	out	0x38, r24	; 56
	return 1;
}
 a08:	81 e0       	ldi	r24, 0x01	; 1
 a0a:	08 95       	ret

Disassembly of section .text.libgcc:

00000a0c <__tablejump2__>:
 a0c:	ee 0f       	add	r30, r30
 a0e:	ff 1f       	adc	r31, r31
 a10:	05 90       	lpm	r0, Z+
 a12:	f4 91       	lpm	r31, Z
 a14:	e0 2d       	mov	r30, r0
 a16:	09 94       	ijmp
