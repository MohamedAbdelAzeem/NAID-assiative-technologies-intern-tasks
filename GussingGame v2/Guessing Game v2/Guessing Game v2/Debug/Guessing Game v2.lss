
Guessing Game v2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000009cc  00000a80  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000a80  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000001c8  00000000  00000000  00000aaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00002820  00000000  00000000  00000c77  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000099a  00000000  00000000  00003497  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000d35  00000000  00000000  00003e31  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000480  00000000  00000000  00004b68  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002e5  00000000  00000000  00004fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000ff4  00000000  00000000  000052cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000168  00000000  00000000  000062c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000009b8  000009b8  00000a6c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000642c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .rodata       00000010  00800060  000009bc  00000a70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 14 .text.delay_ms 00000080  000004f2  000004f2  000005a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.delay_us 00000084  0000046e  0000046e  00000522  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.KeyPad_4x3_adjustKeyNumber 00000018  00000988  00000988  00000a3c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.KeyPad_getPressedKey 0000006a  000005e4  000005e4  00000698  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.LCD_sendCommand 00000058  000006aa  000006aa  0000075e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.LCD_init 0000004a  0000089c  0000089c  00000950  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.LCD_displayCharacter 00000058  00000702  00000702  000007b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.LCD_displayString 00000036  000008e6  000008e6  0000099a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.LCD_goToRowColumn 0000002e  0000091c  0000091c  000009d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.LCD_displayStringRowColumn 0000001e  0000096a  0000096a  00000a1e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.LCD_clearScreen 00000008  000009b0  000009b0  00000a64  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.tostring 00000072  00000572  00000572  00000626  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .progmemx.data 00000035  000000b4  000000b4  00000168  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 27 .text.main    000000c8  000003a6  000003a6  0000045a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.DIO_SetPinDirection 000000ea  000000ea  000000ea  0000019e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.DIO_SetPinValue 000000ea  000001d4  000001d4  00000288  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.DIO_SetPortDirection 00000058  0000075a  0000075a  0000080e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.DIO_SetPortValue 00000020  0000094a  0000094a  000009fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.DIO_GetPinValue 0000005c  0000064e  0000064e  00000702  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.__vector_10 0000004e  000007b2  000007b2  00000866  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.__vector_4 0000004e  00000800  00000800  000008b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.__vector_7 0000004e  0000084e  0000084e  00000902  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.Timer_start 000000e8  000002be  000002be  00000372  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.Timer1A_CTC_flag 00000010  000009a0  000009a0  00000a54  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .bss.g_callBackPtrTimer2CTC 00000002  00800070  00800070  00000a80  2**0
                  ALLOC
 39 .bss.g_callBackPtrTimer1COMPA 00000002  00800072  00800072  00000a80  2**0
                  ALLOC
 40 .bss.g_callBackPtrTimer0CTC 00000002  00800074  00800074  00000a80  2**0
                  ALLOC

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 30 00 	jmp	0x60	; 0x60 <__ctors_end>
   4:	0c 94 dc 04 	jmp	0x9b8	; 0x9b8 <__bad_interrupt>
   8:	0c 94 dc 04 	jmp	0x9b8	; 0x9b8 <__bad_interrupt>
   c:	0c 94 dc 04 	jmp	0x9b8	; 0x9b8 <__bad_interrupt>
  10:	0c 94 00 04 	jmp	0x800	; 0x800 <__DATA_REGION_LENGTH__>
  14:	0c 94 dc 04 	jmp	0x9b8	; 0x9b8 <__bad_interrupt>
  18:	0c 94 dc 04 	jmp	0x9b8	; 0x9b8 <__bad_interrupt>
  1c:	0c 94 27 04 	jmp	0x84e	; 0x84e <__vector_7>
  20:	0c 94 dc 04 	jmp	0x9b8	; 0x9b8 <__bad_interrupt>
  24:	0c 94 dc 04 	jmp	0x9b8	; 0x9b8 <__bad_interrupt>
  28:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <__vector_10>
  2c:	0c 94 dc 04 	jmp	0x9b8	; 0x9b8 <__bad_interrupt>
  30:	0c 94 dc 04 	jmp	0x9b8	; 0x9b8 <__bad_interrupt>
  34:	0c 94 dc 04 	jmp	0x9b8	; 0x9b8 <__bad_interrupt>
  38:	0c 94 dc 04 	jmp	0x9b8	; 0x9b8 <__bad_interrupt>
  3c:	0c 94 dc 04 	jmp	0x9b8	; 0x9b8 <__bad_interrupt>
  40:	0c 94 dc 04 	jmp	0x9b8	; 0x9b8 <__bad_interrupt>
  44:	0c 94 dc 04 	jmp	0x9b8	; 0x9b8 <__bad_interrupt>
  48:	0c 94 dc 04 	jmp	0x9b8	; 0x9b8 <__bad_interrupt>
  4c:	0c 94 dc 04 	jmp	0x9b8	; 0x9b8 <__bad_interrupt>
  50:	0c 94 dc 04 	jmp	0x9b8	; 0x9b8 <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 70       	andi	r16, 0x00	; 0
  58:	00 09       	sbc	r16, r0
  5a:	bc 00       	.word	0x00bc	; ????
  5c:	70 00       	.word	0x0070	; ????
  5e:	76 80       	ldd	r7, Z+6	; 0x06

00000060 <__ctors_end>:
  60:	11 24       	eor	r1, r1
  62:	1f be       	out	0x3f, r1	; 63
  64:	cf e5       	ldi	r28, 0x5F	; 95
  66:	d8 e0       	ldi	r29, 0x08	; 8
  68:	de bf       	out	0x3e, r29	; 62
  6a:	cd bf       	out	0x3d, r28	; 61

0000006c <__do_copy_data>:
  6c:	e4 e5       	ldi	r30, 0x54	; 84
  6e:	f0 e0       	ldi	r31, 0x00	; 0
  70:	40 e0       	ldi	r20, 0x00	; 0
  72:	17 c0       	rjmp	.+46     	; 0xa2 <__do_clear_bss+0x8>
  74:	b5 91       	lpm	r27, Z+
  76:	a5 91       	lpm	r26, Z+
  78:	35 91       	lpm	r19, Z+
  7a:	25 91       	lpm	r18, Z+
  7c:	05 91       	lpm	r16, Z+
  7e:	07 fd       	sbrc	r16, 7
  80:	0c c0       	rjmp	.+24     	; 0x9a <__do_clear_bss>
  82:	95 91       	lpm	r25, Z+
  84:	85 91       	lpm	r24, Z+
  86:	ef 01       	movw	r28, r30
  88:	f9 2f       	mov	r31, r25
  8a:	e8 2f       	mov	r30, r24
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	a2 17       	cp	r26, r18
  92:	b3 07       	cpc	r27, r19
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0x20>
  96:	fe 01       	movw	r30, r28
  98:	04 c0       	rjmp	.+8      	; 0xa2 <__do_clear_bss+0x8>

0000009a <__do_clear_bss>:
  9a:	1d 92       	st	X+, r1
  9c:	a2 17       	cp	r26, r18
  9e:	b3 07       	cpc	r27, r19
  a0:	e1 f7       	brne	.-8      	; 0x9a <__do_clear_bss>
  a2:	e0 36       	cpi	r30, 0x60	; 96
  a4:	f4 07       	cpc	r31, r20
  a6:	31 f7       	brne	.-52     	; 0x74 <__do_copy_data+0x8>
  a8:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <main>
  ac:	0c 94 58 00 	jmp	0xb0	; 0xb0 <_exit>

000000b0 <_exit>:
  b0:	f8 94       	cli

000000b2 <__stop_program>:
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <__stop_program>

Disassembly of section .text:

000009b8 <__bad_interrupt>:
 9b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.delay_ms:

000004f2 <delay_ms>:
/* if you want delay more than 250us use delay_ms  */


/* Enter delay in Milliseconds */
void delay_ms(uint16_t delay)
{
 4f2:	ef 92       	push	r14
 4f4:	ff 92       	push	r15
 4f6:	0f 93       	push	r16
 4f8:	1f 93       	push	r17
 4fa:	cf 93       	push	r28
 4fc:	df 93       	push	r29
 4fe:	cd b7       	in	r28, 0x3d	; 61
 500:	de b7       	in	r29, 0x3e	; 62
 502:	28 97       	sbiw	r28, 0x08	; 8
 504:	0f b6       	in	r0, 0x3f	; 63
 506:	f8 94       	cli
 508:	de bf       	out	0x3e, r29	; 62
 50a:	0f be       	out	0x3f, r0	; 63
 50c:	cd bf       	out	0x3d, r28	; 61
 50e:	7c 01       	movw	r14, r24
	uint16_t counter=  0;
	/* configure timer to count to  100usec  */
	St_Config_Timer_t timer0_config1 = {TIMER1, COMPARE_MODE_toggel , INTERNAL_CLK_PRESCALAR0_1 , DEFAULT_INITIAL_VALUE,100,CHANNEL_A};
 510:	88 e0       	ldi	r24, 0x08	; 8
 512:	e0 e6       	ldi	r30, 0x60	; 96
 514:	f0 e0       	ldi	r31, 0x00	; 0
 516:	de 01       	movw	r26, r28
 518:	11 96       	adiw	r26, 0x01	; 1
 51a:	01 90       	ld	r0, Z+
 51c:	0d 92       	st	X+, r0
 51e:	8a 95       	dec	r24
 520:	e1 f7       	brne	.-8      	; 0x51a <delay_ms+0x28>

	Timer_start(&timer0_config1);
 522:	ce 01       	movw	r24, r28
 524:	01 96       	adiw	r24, 0x01	; 1
 526:	0e 94 5f 01 	call	0x2be	; 0x2be <Timer_start>


/* Enter delay in Milliseconds */
void delay_ms(uint16_t delay)
{
	uint16_t counter=  0;
 52a:	00 e0       	ldi	r16, 0x00	; 0
 52c:	10 e0       	ldi	r17, 0x00	; 0
	St_Config_Timer_t timer0_config1 = {TIMER1, COMPARE_MODE_toggel , INTERNAL_CLK_PRESCALAR0_1 , DEFAULT_INITIAL_VALUE,100,CHANNEL_A};

	Timer_start(&timer0_config1);
	 while(1)
		{
			if(Timer1A_CTC_flag())
 52e:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <Timer1A_CTC_flag>
 532:	88 23       	and	r24, r24
 534:	e1 f3       	breq	.-8      	; 0x52e <delay_ms+0x3c>
			{
				 counter++;
 536:	0f 5f       	subi	r16, 0xFF	; 255
 538:	1f 4f       	sbci	r17, 0xFF	; 255
				if(counter == delay * 10  )
 53a:	c7 01       	movw	r24, r14
 53c:	88 0f       	add	r24, r24
 53e:	99 1f       	adc	r25, r25
 540:	88 0f       	add	r24, r24
 542:	99 1f       	adc	r25, r25
 544:	88 0f       	add	r24, r24
 546:	99 1f       	adc	r25, r25
 548:	97 01       	movw	r18, r14
 54a:	22 0f       	add	r18, r18
 54c:	33 1f       	adc	r19, r19
 54e:	82 0f       	add	r24, r18
 550:	93 1f       	adc	r25, r19
 552:	08 17       	cp	r16, r24
 554:	19 07       	cpc	r17, r25
 556:	59 f7       	brne	.-42     	; 0x52e <delay_ms+0x3c>
				}
		
			}
		
		}
}
 558:	28 96       	adiw	r28, 0x08	; 8
 55a:	0f b6       	in	r0, 0x3f	; 63
 55c:	f8 94       	cli
 55e:	de bf       	out	0x3e, r29	; 62
 560:	0f be       	out	0x3f, r0	; 63
 562:	cd bf       	out	0x3d, r28	; 61
 564:	df 91       	pop	r29
 566:	cf 91       	pop	r28
 568:	1f 91       	pop	r17
 56a:	0f 91       	pop	r16
 56c:	ff 90       	pop	r15
 56e:	ef 90       	pop	r14
 570:	08 95       	ret

Disassembly of section .text.delay_us:

0000046e <delay_us>:



void delay_us(uint16_t delay)
{
 46e:	ef 92       	push	r14
 470:	ff 92       	push	r15
 472:	0f 93       	push	r16
 474:	1f 93       	push	r17
 476:	cf 93       	push	r28
 478:	df 93       	push	r29
 47a:	cd b7       	in	r28, 0x3d	; 61
 47c:	de b7       	in	r29, 0x3e	; 62
 47e:	28 97       	sbiw	r28, 0x08	; 8
 480:	0f b6       	in	r0, 0x3f	; 63
 482:	f8 94       	cli
 484:	de bf       	out	0x3e, r29	; 62
 486:	0f be       	out	0x3f, r0	; 63
 488:	cd bf       	out	0x3d, r28	; 61
 48a:	7c 01       	movw	r14, r24
	
		uint16_t counter=  0;
		/* configure timer to count to  100usec  */
		St_Config_Timer_t timer0_config1 = {TIMER1, COMPARE_MODE_toggel , INTERNAL_CLK_PRESCALAR0_1 , DEFAULT_INITIAL_VALUE,0,CHANNEL_A};
 48c:	88 e0       	ldi	r24, 0x08	; 8
 48e:	e8 e6       	ldi	r30, 0x68	; 104
 490:	f0 e0       	ldi	r31, 0x00	; 0
 492:	de 01       	movw	r26, r28
 494:	11 96       	adiw	r26, 0x01	; 1
 496:	01 90       	ld	r0, Z+
 498:	0d 92       	st	X+, r0
 49a:	8a 95       	dec	r24
 49c:	e1 f7       	brne	.-8      	; 0x496 <delay_us+0x28>

		timer0_config1.compare_value = delay;
 49e:	ff 82       	std	Y+7, r15	; 0x07
 4a0:	ee 82       	std	Y+6, r14	; 0x06
		Timer_start(&timer0_config1);
 4a2:	ce 01       	movw	r24, r28
 4a4:	01 96       	adiw	r24, 0x01	; 1
 4a6:	0e 94 5f 01 	call	0x2be	; 0x2be <Timer_start>


void delay_us(uint16_t delay)
{
	
		uint16_t counter=  0;
 4aa:	00 e0       	ldi	r16, 0x00	; 0
 4ac:	10 e0       	ldi	r17, 0x00	; 0

		timer0_config1.compare_value = delay;
		Timer_start(&timer0_config1);
		while(1)
		{
			if(Timer1A_CTC_flag())
 4ae:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <Timer1A_CTC_flag>
 4b2:	88 23       	and	r24, r24
 4b4:	e1 f3       	breq	.-8      	; 0x4ae <delay_us+0x40>
			{
				counter++;
 4b6:	0f 5f       	subi	r16, 0xFF	; 255
 4b8:	1f 4f       	sbci	r17, 0xFF	; 255
				if(counter == delay * 10  )
 4ba:	c7 01       	movw	r24, r14
 4bc:	88 0f       	add	r24, r24
 4be:	99 1f       	adc	r25, r25
 4c0:	88 0f       	add	r24, r24
 4c2:	99 1f       	adc	r25, r25
 4c4:	88 0f       	add	r24, r24
 4c6:	99 1f       	adc	r25, r25
 4c8:	97 01       	movw	r18, r14
 4ca:	22 0f       	add	r18, r18
 4cc:	33 1f       	adc	r19, r19
 4ce:	82 0f       	add	r24, r18
 4d0:	93 1f       	adc	r25, r19
 4d2:	08 17       	cp	r16, r24
 4d4:	19 07       	cpc	r17, r25
 4d6:	59 f7       	brne	.-42     	; 0x4ae <delay_us+0x40>
				}
				
			}
			
		}
 4d8:	28 96       	adiw	r28, 0x08	; 8
 4da:	0f b6       	in	r0, 0x3f	; 63
 4dc:	f8 94       	cli
 4de:	de bf       	out	0x3e, r29	; 62
 4e0:	0f be       	out	0x3f, r0	; 63
 4e2:	cd bf       	out	0x3d, r28	; 61
 4e4:	df 91       	pop	r29
 4e6:	cf 91       	pop	r28
 4e8:	1f 91       	pop	r17
 4ea:	0f 91       	pop	r16
 4ec:	ff 90       	pop	r15
 4ee:	ef 90       	pop	r14
 4f0:	08 95       	ret

Disassembly of section .text.KeyPad_4x3_adjustKeyNumber:

00000988 <KeyPad_4x3_adjustKeyNumber>:

#if (N_col == 3)

static uint8_t KeyPad_4x3_adjustKeyNumber(uint8_t button_number)
{
	switch(button_number)
 988:	8b 30       	cpi	r24, 0x0B	; 11
 98a:	41 f0       	breq	.+16     	; 0x99c <KeyPad_4x3_adjustKeyNumber+0x14>
 98c:	8c 30       	cpi	r24, 0x0C	; 12
 98e:	21 f0       	breq	.+8      	; 0x998 <KeyPad_4x3_adjustKeyNumber+0x10>
 990:	8a 30       	cpi	r24, 0x0A	; 10
 992:	29 f4       	brne	.+10     	; 0x99e <KeyPad_4x3_adjustKeyNumber+0x16>
	{
		case 10: return '*'; // ASCII Code of *
 994:	8a e2       	ldi	r24, 0x2A	; 42
 996:	08 95       	ret
				 break;
		case 11: return 0;
				 break;
		case 12: return '#'; // ASCII Code of #
 998:	83 e2       	ldi	r24, 0x23	; 35
 99a:	08 95       	ret
{
	switch(button_number)
	{
		case 10: return '*'; // ASCII Code of *
				 break;
		case 11: return 0;
 99c:	80 e0       	ldi	r24, 0x00	; 0
				 break;
		case 12: return '#'; // ASCII Code of #
				 break;
		default: return button_number;
	}
}
 99e:	08 95       	ret

Disassembly of section .text.KeyPad_getPressedKey:

000005e4 <KeyPad_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8_t KeyPad_getPressedKey(void)
{
 5e4:	cf 93       	push	r28
 5e6:	df 93       	push	r29
	uint8_t col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
 5e8:	d0 e0       	ldi	r29, 0x00	; 0
 5ea:	2b c0       	rjmp	.+86     	; 0x642 <KeyPad_getPressedKey+0x5e>
			/*
			 * each time only one of the column pins will be output and
			 * the rest will be input pins include the row pins
			 */
			//KEYPAD_PORT_DIR = (0b00010000<<col);
			DIO_SetPortDirection(KEYPAD_PORT_DIR,INPUT);
 5ec:	60 e0       	ldi	r22, 0x00	; 0
 5ee:	80 e0       	ldi	r24, 0x00	; 0
 5f0:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_SetPortDirection>
			DIO_SetPinDirection(KEYPAD_PORT_DIR, 4 + col, OUTPUT);
 5f4:	41 e0       	ldi	r20, 0x01	; 1
 5f6:	64 e0       	ldi	r22, 0x04	; 4
 5f8:	6d 0f       	add	r22, r29
 5fa:	80 e0       	ldi	r24, 0x00	; 0
 5fc:	0e 94 75 00 	call	0xea	; 0xea <DIO_SetPinDirection>
			/*
			 * clear the output pin column in this trace and enable the internal
			 * pull up resistors for the rows pins
			 */
			//KEYPAD_PORT_OUT = (~(0b00010000<<col));
			DIO_SetPortValue(KEYPAD_PORT_OUT,(~(0b00010000<<col)));
 600:	60 e1       	ldi	r22, 0x10	; 16
 602:	70 e0       	ldi	r23, 0x00	; 0
 604:	0d 2e       	mov	r0, r29
 606:	02 c0       	rjmp	.+4      	; 0x60c <KeyPad_getPressedKey+0x28>
 608:	66 0f       	add	r22, r22
 60a:	77 1f       	adc	r23, r23
 60c:	0a 94       	dec	r0
 60e:	e2 f7       	brpl	.-8      	; 0x608 <KeyPad_getPressedKey+0x24>
 610:	60 95       	com	r22
 612:	80 e0       	ldi	r24, 0x00	; 0
 614:	0e 94 a5 04 	call	0x94a	; 0x94a <DIO_SetPortValue>

			for(row=0;row<N_row;row++) /* loop for rows */
 618:	c0 e0       	ldi	r28, 0x00	; 0
 61a:	10 c0       	rjmp	.+32     	; 0x63c <KeyPad_getPressedKey+0x58>
			{
				//BIT_IS_CLEAR(KEYPAD_PORT_IN,row)
				if(DIO_GetPinValue(KEYPAD_PORT_IN, row) == 0) /* if the switch is press in this row */
 61c:	6c 2f       	mov	r22, r28
 61e:	80 e0       	ldi	r24, 0x00	; 0
 620:	0e 94 27 03 	call	0x64e	; 0x64e <DIO_GetPinValue>
 624:	81 11       	cpse	r24, r1
 626:	09 c0       	rjmp	.+18     	; 0x63a <KeyPad_getPressedKey+0x56>
				{
					#if (N_col == 3)
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
 628:	8c 2f       	mov	r24, r28
 62a:	88 0f       	add	r24, r24
 62c:	c8 0f       	add	r28, r24
 62e:	8c 2f       	mov	r24, r28
 630:	8d 0f       	add	r24, r29
 632:	8f 5f       	subi	r24, 0xFF	; 255
 634:	0e 94 c4 04 	call	0x988	; 0x988 <KeyPad_4x3_adjustKeyNumber>
 638:	07 c0       	rjmp	.+14     	; 0x648 <KeyPad_getPressedKey+0x64>
			 * pull up resistors for the rows pins
			 */
			//KEYPAD_PORT_OUT = (~(0b00010000<<col));
			DIO_SetPortValue(KEYPAD_PORT_OUT,(~(0b00010000<<col)));

			for(row=0;row<N_row;row++) /* loop for rows */
 63a:	cf 5f       	subi	r28, 0xFF	; 255
 63c:	c4 30       	cpi	r28, 0x04	; 4
 63e:	70 f3       	brcs	.-36     	; 0x61c <KeyPad_getPressedKey+0x38>
uint8_t KeyPad_getPressedKey(void)
{
	uint8_t col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
 640:	df 5f       	subi	r29, 0xFF	; 255
 642:	d3 30       	cpi	r29, 0x03	; 3
 644:	98 f2       	brcs	.-90     	; 0x5ec <KeyPad_getPressedKey+0x8>
 646:	d0 cf       	rjmp	.-96     	; 0x5e8 <KeyPad_getPressedKey+0x4>
					#endif
				}
			}
		}
	}
}
 648:	df 91       	pop	r29
 64a:	cf 91       	pop	r28
 64c:	08 95       	ret

Disassembly of section .text.LCD_sendCommand:

000006aa <LCD_sendCommand>:
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
}

void LCD_sendCommand(uint8_t command)
{
 6aa:	cf 93       	push	r28
 6ac:	c8 2f       	mov	r28, r24
	//CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
	DIO_SetPinValue(LCD_CTRL_PORT, RS, LOW);
 6ae:	40 e0       	ldi	r20, 0x00	; 0
 6b0:	64 e0       	ldi	r22, 0x04	; 4
 6b2:	83 e0       	ldi	r24, 0x03	; 3
 6b4:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <DIO_SetPinValue>
	
	//CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
	DIO_SetPinValue(LCD_CTRL_PORT, RW, LOW);
 6b8:	40 e0       	ldi	r20, 0x00	; 0
 6ba:	65 e0       	ldi	r22, 0x05	; 5
 6bc:	83 e0       	ldi	r24, 0x03	; 3
 6be:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <DIO_SetPinValue>
	
	delay_us(1); /* delay for processing Tas = 50ns */
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	0e 94 37 02 	call	0x46e	; 0x46e <delay_us>
	
	//SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
	DIO_SetPinValue(LCD_CTRL_PORT, E, HIGH);
 6ca:	41 e0       	ldi	r20, 0x01	; 1
 6cc:	66 e0       	ldi	r22, 0x06	; 6
 6ce:	83 e0       	ldi	r24, 0x03	; 3
 6d0:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <DIO_SetPinValue>
	
	delay_us(1); /* delay for processing Tpw - Tdws = 190ns */
 6d4:	81 e0       	ldi	r24, 0x01	; 1
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	0e 94 37 02 	call	0x46e	; 0x46e <delay_us>
	DIO_SetPinValue(LCD_CTRL_PORT, E, LOW);
	delay_us(1); /* delay for processing Th = 13ns */
	
#elif (DATA_BITS_MODE == 8)
	//LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
	DIO_SetPortValue(LCD_DATA_PORT, command);
 6dc:	6c 2f       	mov	r22, r28
 6de:	82 e0       	ldi	r24, 0x02	; 2
 6e0:	0e 94 a5 04 	call	0x94a	; 0x94a <DIO_SetPortValue>
	delay_us(1); /* delay for processing Tdsw = 100ns */
 6e4:	81 e0       	ldi	r24, 0x01	; 1
 6e6:	90 e0       	ldi	r25, 0x00	; 0
 6e8:	0e 94 37 02 	call	0x46e	; 0x46e <delay_us>
	//CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	DIO_SetPinValue(LCD_CTRL_PORT, E, LOW);
 6ec:	40 e0       	ldi	r20, 0x00	; 0
 6ee:	66 e0       	ldi	r22, 0x06	; 6
 6f0:	83 e0       	ldi	r24, 0x03	; 3
 6f2:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <DIO_SetPinValue>
	delay_us(1); /* delay for processing Th = 13ns */
 6f6:	81 e0       	ldi	r24, 0x01	; 1
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	0e 94 37 02 	call	0x46e	; 0x46e <delay_us>
#endif
}
 6fe:	cf 91       	pop	r28
 700:	08 95       	ret

Disassembly of section .text.LCD_init:

0000089c <LCD_init>:
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
//	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
	DIO_SetPinDirection(LCD_CTRL_PORT_DIR, E, OUTPUT);
 89c:	41 e0       	ldi	r20, 0x01	; 1
 89e:	66 e0       	ldi	r22, 0x06	; 6
 8a0:	83 e0       	ldi	r24, 0x03	; 3
 8a2:	0e 94 75 00 	call	0xea	; 0xea <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_CTRL_PORT_DIR, RS, OUTPUT);
 8a6:	41 e0       	ldi	r20, 0x01	; 1
 8a8:	64 e0       	ldi	r22, 0x04	; 4
 8aa:	83 e0       	ldi	r24, 0x03	; 3
 8ac:	0e 94 75 00 	call	0xea	; 0xea <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_CTRL_PORT_DIR, RW, OUTPUT);
 8b0:	41 e0       	ldi	r20, 0x01	; 1
 8b2:	65 e0       	ldi	r22, 0x05	; 5
 8b4:	83 e0       	ldi	r24, 0x03	; 3
 8b6:	0e 94 75 00 	call	0xea	; 0xea <DIO_SetPinDirection>
	
	DIO_SetPortValue(LCD_CTRL_PORT_DIR, 0x00);
 8ba:	60 e0       	ldi	r22, 0x00	; 0
 8bc:	83 e0       	ldi	r24, 0x03	; 3
 8be:	0e 94 a5 04 	call	0x94a	; 0x94a <DIO_SetPortValue>
	DIO_SetPortValue(LCD_DATA_PORT_DIR, 0x00);
 8c2:	60 e0       	ldi	r22, 0x00	; 0
 8c4:	82 e0       	ldi	r24, 0x02	; 2
 8c6:	0e 94 a5 04 	call	0x94a	; 0x94a <DIO_SetPortValue>
		#endif
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
	#elif (DATA_BITS_MODE == 8)
		//LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */
		DIO_SetPortDirection(LCD_DATA_PORT_DIR, OUTPUT);
 8ca:	61 e0       	ldi	r22, 0x01	; 1
 8cc:	82 e0       	ldi	r24, 0x02	; 2
 8ce:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_SetPortDirection>
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
 8d2:	88 e3       	ldi	r24, 0x38	; 56
 8d4:	0e 94 55 03 	call	0x6aa	; 0x6aa <LCD_sendCommand>
	#endif

	LCD_sendCommand(CURSOR_OFF); /* cursor off */
 8d8:	8c e0       	ldi	r24, 0x0C	; 12
 8da:	0e 94 55 03 	call	0x6aa	; 0x6aa <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
 8de:	81 e0       	ldi	r24, 0x01	; 1
 8e0:	0e 94 55 03 	call	0x6aa	; 0x6aa <LCD_sendCommand>
 8e4:	08 95       	ret

Disassembly of section .text.LCD_displayCharacter:

00000702 <LCD_displayCharacter>:
	delay_us(1); /* delay for processing Th = 13ns */
#endif
}

void LCD_displayCharacter(uint8_t data)
{
 702:	cf 93       	push	r28
 704:	c8 2f       	mov	r28, r24
	//SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
	DIO_SetPinValue(LCD_CTRL_PORT, RS, HIGH);
 706:	41 e0       	ldi	r20, 0x01	; 1
 708:	64 e0       	ldi	r22, 0x04	; 4
 70a:	83 e0       	ldi	r24, 0x03	; 3
 70c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <DIO_SetPinValue>
	
	//CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
	DIO_SetPinValue(LCD_CTRL_PORT, RW, LOW);
 710:	40 e0       	ldi	r20, 0x00	; 0
 712:	65 e0       	ldi	r22, 0x05	; 5
 714:	83 e0       	ldi	r24, 0x03	; 3
 716:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <DIO_SetPinValue>
	
	delay_us(1); /* delay for processing Tas = 50ns */
 71a:	81 e0       	ldi	r24, 0x01	; 1
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	0e 94 37 02 	call	0x46e	; 0x46e <delay_us>
	//SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    DIO_SetPinValue(LCD_CTRL_PORT, E, HIGH);
 722:	41 e0       	ldi	r20, 0x01	; 1
 724:	66 e0       	ldi	r22, 0x06	; 6
 726:	83 e0       	ldi	r24, 0x03	; 3
 728:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <DIO_SetPinValue>
	
	delay_us(1); /* delay for processing Tpw - Tdws = 190ns */
 72c:	81 e0       	ldi	r24, 0x01	; 1
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	0e 94 37 02 	call	0x46e	; 0x46e <delay_us>
	DIO_SetPinValue(LCD_CTRL_PORT, E, LOW);
	
	delay_us(1); /* delay for processing Th = 13ns */
#elif (DATA_BITS_MODE == 8)
	//LCD_DATA_PORT = data; /* out the required command to the data bus D0 --> D7 */
	DIO_SetPortValue(LCD_DATA_PORT, data);
 734:	6c 2f       	mov	r22, r28
 736:	82 e0       	ldi	r24, 0x02	; 2
 738:	0e 94 a5 04 	call	0x94a	; 0x94a <DIO_SetPortValue>
	delay_us(1); /* delay for processing Tdsw = 100ns */
 73c:	81 e0       	ldi	r24, 0x01	; 1
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	0e 94 37 02 	call	0x46e	; 0x46e <delay_us>
	
	//CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	DIO_SetPinValue(LCD_CTRL_PORT, E, LOW);
 744:	40 e0       	ldi	r20, 0x00	; 0
 746:	66 e0       	ldi	r22, 0x06	; 6
 748:	83 e0       	ldi	r24, 0x03	; 3
 74a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <DIO_SetPinValue>
	delay_us(1); /* delay for processing Th = 13ns */
 74e:	81 e0       	ldi	r24, 0x01	; 1
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	0e 94 37 02 	call	0x46e	; 0x46e <delay_us>
#endif
}
 756:	cf 91       	pop	r28
 758:	08 95       	ret

Disassembly of section .text.LCD_displayString:

000008e6 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
 8e6:	cf 92       	push	r12
 8e8:	df 92       	push	r13
 8ea:	ef 92       	push	r14
 8ec:	cf 93       	push	r28
 8ee:	6b 01       	movw	r12, r22
 8f0:	e8 2e       	mov	r14, r24
	uint8_t i = 0;
 8f2:	c0 e0       	ldi	r28, 0x00	; 0
	while(Str[i] != '\0')
 8f4:	03 c0       	rjmp	.+6      	; 0x8fc <LCD_displayString+0x16>
	{
		LCD_displayCharacter(Str[i]);
 8f6:	0e 94 81 03 	call	0x702	; 0x702 <LCD_displayCharacter>
		i++;
 8fa:	cf 5f       	subi	r28, 0xFF	; 255
}

void LCD_displayString(const char *Str)
{
	uint8_t i = 0;
	while(Str[i] != '\0')
 8fc:	ae 2d       	mov	r26, r14
 8fe:	c6 01       	movw	r24, r12
 900:	8c 0f       	add	r24, r28
 902:	91 1d       	adc	r25, r1
 904:	a1 1d       	adc	r26, r1
 906:	fc 01       	movw	r30, r24
 908:	84 91       	lpm	r24, Z
 90a:	a7 fd       	sbrc	r26, 7
 90c:	80 81       	ld	r24, Z
 90e:	81 11       	cpse	r24, r1
 910:	f2 cf       	rjmp	.-28     	; 0x8f6 <LCD_displayString+0x10>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
 912:	cf 91       	pop	r28
 914:	ef 90       	pop	r14
 916:	df 90       	pop	r13
 918:	cf 90       	pop	r12
 91a:	08 95       	ret

Disassembly of section .text.LCD_goToRowColumn:

0000091c <LCD_goToRowColumn>:
void LCD_goToRowColumn(uint8_t row,uint8_t col)
	{
	uint8_t Address;

	/* first of all calculate the required address */
	switch(row)
 91c:	81 30       	cpi	r24, 0x01	; 1
 91e:	31 f0       	breq	.+12     	; 0x92c <LCD_goToRowColumn+0x10>
 920:	70 f0       	brcs	.+28     	; 0x93e <LCD_goToRowColumn+0x22>
 922:	82 30       	cpi	r24, 0x02	; 2
 924:	31 f0       	breq	.+12     	; 0x932 <LCD_goToRowColumn+0x16>
 926:	83 30       	cpi	r24, 0x03	; 3
 928:	39 f0       	breq	.+14     	; 0x938 <LCD_goToRowColumn+0x1c>
 92a:	0a c0       	rjmp	.+20     	; 0x940 <LCD_goToRowColumn+0x24>
	{
		case 0:
				Address=col;
				break;
		case 1:
				Address=col+0x40;
 92c:	90 e4       	ldi	r25, 0x40	; 64
 92e:	96 0f       	add	r25, r22
				break;
 930:	07 c0       	rjmp	.+14     	; 0x940 <LCD_goToRowColumn+0x24>
		case 2:
				Address=col+0x10;
 932:	90 e1       	ldi	r25, 0x10	; 16
 934:	96 0f       	add	r25, r22
				break;
 936:	04 c0       	rjmp	.+8      	; 0x940 <LCD_goToRowColumn+0x24>
		case 3:
				Address=col+0x50;
 938:	90 e5       	ldi	r25, 0x50	; 80
 93a:	96 0f       	add	r25, r22
				break;
 93c:	01 c0       	rjmp	.+2      	; 0x940 <LCD_goToRowColumn+0x24>

	/* first of all calculate the required address */
	switch(row)
	{
		case 0:
				Address=col;
 93e:	96 2f       	mov	r25, r22
				Address=col+0x50;
				break;
	}
	/* to write to a specific address in the LCD
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION);
 940:	89 2f       	mov	r24, r25
 942:	80 68       	ori	r24, 0x80	; 128
 944:	0e 94 55 03 	call	0x6aa	; 0x6aa <LCD_sendCommand>
 948:	08 95       	ret

Disassembly of section .text.LCD_displayStringRowColumn:

0000096a <LCD_displayStringRowColumn>:
}

void LCD_displayStringRowColumn(uint8_t row,uint8_t col,const char *Str)
{
 96a:	cf 92       	push	r12
 96c:	df 92       	push	r13
 96e:	ef 92       	push	r14
 970:	69 01       	movw	r12, r18
 972:	e4 2e       	mov	r14, r20
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
 974:	0e 94 8e 04 	call	0x91c	; 0x91c <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
 978:	8e 2d       	mov	r24, r14
 97a:	b6 01       	movw	r22, r12
 97c:	0e 94 73 04 	call	0x8e6	; 0x8e6 <LCD_displayString>
}
 980:	ef 90       	pop	r14
 982:	df 90       	pop	r13
 984:	cf 90       	pop	r12
 986:	08 95       	ret

Disassembly of section .text.LCD_clearScreen:

000009b0 <LCD_clearScreen>:
   LCD_displayString(buff);
}

void LCD_clearScreen(void)
{
	LCD_sendCommand(CLEAR_COMMAND); //clear display
 9b0:	81 e0       	ldi	r24, 0x01	; 1
 9b2:	0e 94 55 03 	call	0x6aa	; 0x6aa <LCD_sendCommand>
 9b6:	08 95       	ret

Disassembly of section .text.tostring:

00000572 <tostring>:
}


void tostring(uint8_t str[], uint8_t number)
{
 572:	cf 93       	push	r28
 574:	df 93       	push	r29
 576:	dc 01       	movw	r26, r24
	uint8_t iterator;
	uint8_t StringLength = 0 ;
	uint8_t IntegerNumber = number ;
 578:	96 2f       	mov	r25, r22


void tostring(uint8_t str[], uint8_t number)
{
	uint8_t iterator;
	uint8_t StringLength = 0 ;
 57a:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t IntegerNumber = number ;
	uint8_t remainder = 0;
	/* calculating length of the number */
	while(IntegerNumber != 0 )
 57c:	08 c0       	rjmp	.+16     	; 0x58e <tostring+0x1c>
	{
		StringLength++;
 57e:	3f 5f       	subi	r19, 0xFF	; 255
		IntegerNumber /= 10;
 580:	8d ec       	ldi	r24, 0xCD	; 205
 582:	98 9f       	mul	r25, r24
 584:	91 2d       	mov	r25, r1
 586:	11 24       	eor	r1, r1
 588:	96 95       	lsr	r25
 58a:	96 95       	lsr	r25
 58c:	96 95       	lsr	r25
	uint8_t iterator;
	uint8_t StringLength = 0 ;
	uint8_t IntegerNumber = number ;
	uint8_t remainder = 0;
	/* calculating length of the number */
	while(IntegerNumber != 0 )
 58e:	91 11       	cpse	r25, r1
 590:	f6 cf       	rjmp	.-20     	; 0x57e <tostring+0xc>
 592:	40 e0       	ldi	r20, 0x00	; 0
 594:	1f c0       	rjmp	.+62     	; 0x5d4 <tostring+0x62>
	}
	
	IntegerNumber = number;
	for(iterator = 0; iterator < StringLength; iterator++)
	{
		remainder =  IntegerNumber % 10;
 596:	2d ec       	ldi	r18, 0xCD	; 205
 598:	62 9f       	mul	r22, r18
 59a:	21 2d       	mov	r18, r1
 59c:	11 24       	eor	r1, r1
 59e:	92 2f       	mov	r25, r18
 5a0:	96 95       	lsr	r25
 5a2:	96 95       	lsr	r25
 5a4:	96 95       	lsr	r25
 5a6:	99 0f       	add	r25, r25
 5a8:	89 2f       	mov	r24, r25
 5aa:	88 0f       	add	r24, r24
 5ac:	88 0f       	add	r24, r24
 5ae:	98 0f       	add	r25, r24
 5b0:	69 1b       	sub	r22, r25
 5b2:	96 2f       	mov	r25, r22
		IntegerNumber = IntegerNumber /10;
 5b4:	62 2f       	mov	r22, r18
 5b6:	66 95       	lsr	r22
 5b8:	66 95       	lsr	r22
 5ba:	66 95       	lsr	r22
		str[StringLength-(iterator+1)] = remainder + '0';   /* + '0' to convert number digit to character */
 5bc:	c4 2f       	mov	r28, r20
 5be:	d0 e0       	ldi	r29, 0x00	; 0
 5c0:	21 96       	adiw	r28, 0x01	; 1
 5c2:	e3 2f       	mov	r30, r19
 5c4:	f0 e0       	ldi	r31, 0x00	; 0
 5c6:	ec 1b       	sub	r30, r28
 5c8:	fd 0b       	sbc	r31, r29
 5ca:	ea 0f       	add	r30, r26
 5cc:	fb 1f       	adc	r31, r27
 5ce:	90 5d       	subi	r25, 0xD0	; 208
 5d0:	90 83       	st	Z, r25
		StringLength++;
		IntegerNumber /= 10;
	}
	
	IntegerNumber = number;
	for(iterator = 0; iterator < StringLength; iterator++)
 5d2:	4f 5f       	subi	r20, 0xFF	; 255
 5d4:	43 17       	cp	r20, r19
 5d6:	f8 f2       	brcs	.-66     	; 0x596 <tostring+0x24>
	{
		remainder =  IntegerNumber % 10;
		IntegerNumber = IntegerNumber /10;
		str[StringLength-(iterator+1)] = remainder + '0';   /* + '0' to convert number digit to character */
	}
	str[StringLength] = '\0';
 5d8:	a3 0f       	add	r26, r19
 5da:	b1 1d       	adc	r27, r1
 5dc:	1c 92       	st	X, r1
 5de:	df 91       	pop	r29
 5e0:	cf 91       	pop	r28
 5e2:	08 95       	ret

Disassembly of section .text.main:

000003a6 <main>:
#include "stdlib.h"



int main(void)
{
 3a6:	cf 93       	push	r28
 3a8:	df 93       	push	r29
 3aa:	cd b7       	in	r28, 0x3d	; 61
 3ac:	de b7       	in	r29, 0x3e	; 62
 3ae:	64 97       	sbiw	r28, 0x14	; 20
 3b0:	0f b6       	in	r0, 0x3f	; 63
 3b2:	f8 94       	cli
 3b4:	de bf       	out	0x3e, r29	; 62
 3b6:	0f be       	out	0x3f, r0	; 63
 3b8:	cd bf       	out	0x3d, r28	; 61
	LCD_init();
 3ba:	0e 94 4e 04 	call	0x89c	; 0x89c <LCD_init>
	

	 DDRA = 0x00;
 3be:	1a ba       	out	0x1a, r1	; 26
	 PORTA = 0xFF;
 3c0:	8f ef       	ldi	r24, 0xFF	; 255
 3c2:	8b bb       	out	0x1b, r24	; 27
	 
	uint8_t BUFF[20]= {};
 3c4:	ce 01       	movw	r24, r28
 3c6:	01 96       	adiw	r24, 0x01	; 1
 3c8:	24 e1       	ldi	r18, 0x14	; 20
 3ca:	fc 01       	movw	r30, r24
 3cc:	11 92       	st	Z+, r1
 3ce:	2a 95       	dec	r18
 3d0:	e9 f7       	brne	.-6      	; 0x3cc <main+0x26>

	// uint8_t randomNumber =rand() % 15 ;
	 uint8_t randomNumber = 4;
	 uint16_t TimeOutCounter = 0;
	 uint8_t PressedKey ;
	 tostring(BUFF,randomNumber);
 3d2:	64 e0       	ldi	r22, 0x04	; 4
 3d4:	0e 94 b9 02 	call	0x572	; 0x572 <tostring>
#include "stdlib.h"



int main(void)
{
 3d8:	00 e0       	ldi	r16, 0x00	; 0
 3da:	10 e0       	ldi	r17, 0x00	; 0
	 uint8_t PressedKey ;
	 tostring(BUFF,randomNumber);

    while(1)
    {
	    LCD_displayStringRowColumn(0,0,"Guess Number...");
 3dc:	24 eb       	ldi	r18, 0xB4	; 180
 3de:	30 e0       	ldi	r19, 0x00	; 0
 3e0:	40 e0       	ldi	r20, 0x00	; 0
 3e2:	60 e0       	ldi	r22, 0x00	; 0
 3e4:	80 e0       	ldi	r24, 0x00	; 0
 3e6:	0e 94 b5 04 	call	0x96a	; 0x96a <LCD_displayStringRowColumn>
		 PressedKey = KeyPad_getPressedKey();
 3ea:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <KeyPad_getPressedKey>
		 	
		if(PressedKey == randomNumber)
 3ee:	84 30       	cpi	r24, 0x04	; 4
 3f0:	d1 f4       	brne	.+52     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
		{
	
			LCD_clearScreen();
 3f2:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"Winner...");
 3f6:	24 ec       	ldi	r18, 0xC4	; 196
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	40 e0       	ldi	r20, 0x00	; 0
 3fc:	60 e0       	ldi	r22, 0x00	; 0
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	0e 94 b5 04 	call	0x96a	; 0x96a <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,0,BUFF);
 404:	9e 01       	movw	r18, r28
 406:	2f 5f       	subi	r18, 0xFF	; 255
 408:	3f 4f       	sbci	r19, 0xFF	; 255
 40a:	40 e8       	ldi	r20, 0x80	; 128
 40c:	60 e0       	ldi	r22, 0x00	; 0
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	0e 94 b5 04 	call	0x96a	; 0x96a <LCD_displayStringRowColumn>
			
			TimeOutCounter= 0;
			
			delay_ms(2000);
 414:	80 ed       	ldi	r24, 0xD0	; 208
 416:	97 e0       	ldi	r25, 0x07	; 7
 418:	0e 94 79 02 	call	0x4f2	; 0x4f2 <delay_ms>
			LCD_clearScreen();
 41c:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <LCD_clearScreen>
	
			LCD_clearScreen();
			LCD_displayStringRowColumn(0,0,"Winner...");
			LCD_displayStringRowColumn(1,0,BUFF);
			
			TimeOutCounter= 0;
 420:	00 e0       	ldi	r16, 0x00	; 0
 422:	10 e0       	ldi	r17, 0x00	; 0
 424:	0f c0       	rjmp	.+30     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
			delay_ms(2000);
			LCD_clearScreen();
		}
		else
		{
			LCD_clearScreen();
 426:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"Loser...");
 42a:	2e ec       	ldi	r18, 0xCE	; 206
 42c:	30 e0       	ldi	r19, 0x00	; 0
 42e:	40 e0       	ldi	r20, 0x00	; 0
 430:	60 e0       	ldi	r22, 0x00	; 0
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	0e 94 b5 04 	call	0x96a	; 0x96a <LCD_displayStringRowColumn>
			delay_ms(2000);
 438:	80 ed       	ldi	r24, 0xD0	; 208
 43a:	97 e0       	ldi	r25, 0x07	; 7
 43c:	0e 94 79 02 	call	0x4f2	; 0x4f2 <delay_ms>
			LCD_clearScreen();
 440:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <LCD_clearScreen>
			
		}
		
		
		TimeOutCounter++;
 444:	0f 5f       	subi	r16, 0xFF	; 255
 446:	1f 4f       	sbci	r17, 0xFF	; 255
		if(TimeOutCounter == 100 )
 448:	04 36       	cpi	r16, 0x64	; 100
 44a:	11 05       	cpc	r17, r1
 44c:	39 f6       	brne	.-114    	; 0x3dc <main+0x36>
		{
			LCD_clearScreen();
 44e:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"Time out Loser...");
 452:	27 ed       	ldi	r18, 0xD7	; 215
 454:	30 e0       	ldi	r19, 0x00	; 0
 456:	40 e0       	ldi	r20, 0x00	; 0
 458:	60 e0       	ldi	r22, 0x00	; 0
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	0e 94 b5 04 	call	0x96a	; 0x96a <LCD_displayStringRowColumn>
			delay_ms(2000);
 460:	80 ed       	ldi	r24, 0xD0	; 208
 462:	97 e0       	ldi	r25, 0x07	; 7
 464:	0e 94 79 02 	call	0x4f2	; 0x4f2 <delay_ms>
			LCD_clearScreen();
 468:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <LCD_clearScreen>
 46c:	b5 cf       	rjmp	.-150    	; 0x3d8 <main+0x32>

Disassembly of section .text.DIO_SetPinDirection:

000000ea <DIO_SetPinDirection>:
		case portC :
			TOGGLE_BIT(PORTC_REG , PinNumber) ;
			break ;
			
		case portD :
			TOGGLE_BIT(PORTD_REG , PinNumber) ;
  ea:	81 30       	cpi	r24, 0x01	; 1
  ec:	11 f1       	breq	.+68     	; 0x132 <DIO_SetPinDirection+0x48>
  ee:	30 f0       	brcs	.+12     	; 0xfc <DIO_SetPinDirection+0x12>
  f0:	82 30       	cpi	r24, 0x02	; 2
  f2:	d1 f1       	breq	.+116    	; 0x168 <DIO_SetPinDirection+0x7e>
  f4:	83 30       	cpi	r24, 0x03	; 3
  f6:	09 f4       	brne	.+2      	; 0xfa <DIO_SetPinDirection+0x10>
  f8:	52 c0       	rjmp	.+164    	; 0x19e <DIO_SetPinDirection+0xb4>
  fa:	08 95       	ret
  fc:	41 30       	cpi	r20, 0x01	; 1
  fe:	59 f4       	brne	.+22     	; 0x116 <DIO_SetPinDirection+0x2c>
 100:	2a b3       	in	r18, 0x1a	; 26
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	02 c0       	rjmp	.+4      	; 0x10c <DIO_SetPinDirection+0x22>
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	6a 95       	dec	r22
 10e:	e2 f7       	brpl	.-8      	; 0x108 <DIO_SetPinDirection+0x1e>
 110:	82 2b       	or	r24, r18
 112:	8a bb       	out	0x1a, r24	; 26
 114:	08 95       	ret
 116:	41 11       	cpse	r20, r1
 118:	5c c0       	rjmp	.+184    	; 0x1d2 <DIO_SetPinDirection+0xe8>
 11a:	2a b3       	in	r18, 0x1a	; 26
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	02 c0       	rjmp	.+4      	; 0x126 <DIO_SetPinDirection+0x3c>
 122:	88 0f       	add	r24, r24
 124:	99 1f       	adc	r25, r25
 126:	6a 95       	dec	r22
 128:	e2 f7       	brpl	.-8      	; 0x122 <DIO_SetPinDirection+0x38>
 12a:	80 95       	com	r24
 12c:	82 23       	and	r24, r18
 12e:	8a bb       	out	0x1a, r24	; 26
 130:	08 95       	ret
 132:	41 30       	cpi	r20, 0x01	; 1
 134:	59 f4       	brne	.+22     	; 0x14c <DIO_SetPinDirection+0x62>
 136:	27 b3       	in	r18, 0x17	; 23
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_SetPinDirection+0x58>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_SetPinDirection+0x54>
 146:	82 2b       	or	r24, r18
 148:	87 bb       	out	0x17, r24	; 23
 14a:	08 95       	ret
 14c:	41 11       	cpse	r20, r1
 14e:	41 c0       	rjmp	.+130    	; 0x1d2 <DIO_SetPinDirection+0xe8>
 150:	27 b3       	in	r18, 0x17	; 23
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_SetPinDirection+0x72>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	6a 95       	dec	r22
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_SetPinDirection+0x6e>
 160:	80 95       	com	r24
 162:	82 23       	and	r24, r18
 164:	87 bb       	out	0x17, r24	; 23
 166:	08 95       	ret
 168:	41 30       	cpi	r20, 0x01	; 1
 16a:	59 f4       	brne	.+22     	; 0x182 <DIO_SetPinDirection+0x98>
 16c:	24 b3       	in	r18, 0x14	; 20
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	02 c0       	rjmp	.+4      	; 0x178 <DIO_SetPinDirection+0x8e>
 174:	88 0f       	add	r24, r24
 176:	99 1f       	adc	r25, r25
 178:	6a 95       	dec	r22
 17a:	e2 f7       	brpl	.-8      	; 0x174 <DIO_SetPinDirection+0x8a>
 17c:	82 2b       	or	r24, r18
 17e:	84 bb       	out	0x14, r24	; 20
 180:	08 95       	ret
 182:	41 11       	cpse	r20, r1
 184:	26 c0       	rjmp	.+76     	; 0x1d2 <DIO_SetPinDirection+0xe8>
 186:	24 b3       	in	r18, 0x14	; 20
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	02 c0       	rjmp	.+4      	; 0x192 <DIO_SetPinDirection+0xa8>
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	6a 95       	dec	r22
 194:	e2 f7       	brpl	.-8      	; 0x18e <DIO_SetPinDirection+0xa4>
 196:	80 95       	com	r24
 198:	82 23       	and	r24, r18
 19a:	84 bb       	out	0x14, r24	; 20
 19c:	08 95       	ret
 19e:	41 30       	cpi	r20, 0x01	; 1
 1a0:	59 f4       	brne	.+22     	; 0x1b8 <DIO_SetPinDirection+0xce>
 1a2:	21 b3       	in	r18, 0x11	; 17
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <DIO_SetPinDirection+0xc4>
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	6a 95       	dec	r22
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <DIO_SetPinDirection+0xc0>
 1b2:	82 2b       	or	r24, r18
 1b4:	81 bb       	out	0x11, r24	; 17
 1b6:	08 95       	ret
 1b8:	41 11       	cpse	r20, r1
 1ba:	0b c0       	rjmp	.+22     	; 0x1d2 <DIO_SetPinDirection+0xe8>
 1bc:	21 b3       	in	r18, 0x11	; 17
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <DIO_SetPinDirection+0xde>
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	6a 95       	dec	r22
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <DIO_SetPinDirection+0xda>
 1cc:	80 95       	com	r24
 1ce:	82 23       	and	r24, r18
 1d0:	81 bb       	out	0x11, r24	; 17
 1d2:	08 95       	ret

Disassembly of section .text.DIO_SetPinValue:

000001d4 <DIO_SetPinValue>:
 1d4:	81 30       	cpi	r24, 0x01	; 1
 1d6:	11 f1       	breq	.+68     	; 0x21c <DIO_SetPinValue+0x48>
 1d8:	30 f0       	brcs	.+12     	; 0x1e6 <DIO_SetPinValue+0x12>
 1da:	82 30       	cpi	r24, 0x02	; 2
 1dc:	d1 f1       	breq	.+116    	; 0x252 <DIO_SetPinValue+0x7e>
 1de:	83 30       	cpi	r24, 0x03	; 3
 1e0:	09 f4       	brne	.+2      	; 0x1e4 <DIO_SetPinValue+0x10>
 1e2:	52 c0       	rjmp	.+164    	; 0x288 <DIO_SetPinValue+0xb4>
 1e4:	08 95       	ret
 1e6:	41 30       	cpi	r20, 0x01	; 1
 1e8:	59 f4       	brne	.+22     	; 0x200 <DIO_SetPinValue+0x2c>
 1ea:	2b b3       	in	r18, 0x1b	; 27
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <DIO_SetPinValue+0x22>
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	6a 95       	dec	r22
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <DIO_SetPinValue+0x1e>
 1fa:	82 2b       	or	r24, r18
 1fc:	8b bb       	out	0x1b, r24	; 27
 1fe:	08 95       	ret
 200:	41 11       	cpse	r20, r1
 202:	5c c0       	rjmp	.+184    	; 0x2bc <DIO_SetPinValue+0xe8>
 204:	2b b3       	in	r18, 0x1b	; 27
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_SetPinValue+0x3c>
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	6a 95       	dec	r22
 212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_SetPinValue+0x38>
 214:	80 95       	com	r24
 216:	82 23       	and	r24, r18
 218:	8b bb       	out	0x1b, r24	; 27
 21a:	08 95       	ret
 21c:	41 30       	cpi	r20, 0x01	; 1
 21e:	59 f4       	brne	.+22     	; 0x236 <DIO_SetPinValue+0x62>
 220:	28 b3       	in	r18, 0x18	; 24
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	02 c0       	rjmp	.+4      	; 0x22c <DIO_SetPinValue+0x58>
 228:	88 0f       	add	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	6a 95       	dec	r22
 22e:	e2 f7       	brpl	.-8      	; 0x228 <DIO_SetPinValue+0x54>
 230:	82 2b       	or	r24, r18
 232:	88 bb       	out	0x18, r24	; 24
 234:	08 95       	ret
 236:	41 11       	cpse	r20, r1
 238:	41 c0       	rjmp	.+130    	; 0x2bc <DIO_SetPinValue+0xe8>
 23a:	28 b3       	in	r18, 0x18	; 24
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_SetPinValue+0x72>
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	6a 95       	dec	r22
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_SetPinValue+0x6e>
 24a:	80 95       	com	r24
 24c:	82 23       	and	r24, r18
 24e:	88 bb       	out	0x18, r24	; 24
 250:	08 95       	ret
 252:	41 30       	cpi	r20, 0x01	; 1
 254:	59 f4       	brne	.+22     	; 0x26c <DIO_SetPinValue+0x98>
 256:	25 b3       	in	r18, 0x15	; 21
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_SetPinValue+0x8e>
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	6a 95       	dec	r22
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_SetPinValue+0x8a>
 266:	82 2b       	or	r24, r18
 268:	85 bb       	out	0x15, r24	; 21
 26a:	08 95       	ret
 26c:	41 11       	cpse	r20, r1
 26e:	26 c0       	rjmp	.+76     	; 0x2bc <DIO_SetPinValue+0xe8>
 270:	25 b3       	in	r18, 0x15	; 21
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	02 c0       	rjmp	.+4      	; 0x27c <DIO_SetPinValue+0xa8>
 278:	88 0f       	add	r24, r24
 27a:	99 1f       	adc	r25, r25
 27c:	6a 95       	dec	r22
 27e:	e2 f7       	brpl	.-8      	; 0x278 <DIO_SetPinValue+0xa4>
 280:	80 95       	com	r24
 282:	82 23       	and	r24, r18
 284:	85 bb       	out	0x15, r24	; 21
 286:	08 95       	ret
 288:	41 30       	cpi	r20, 0x01	; 1
 28a:	59 f4       	brne	.+22     	; 0x2a2 <DIO_SetPinValue+0xce>
 28c:	22 b3       	in	r18, 0x12	; 18
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	02 c0       	rjmp	.+4      	; 0x298 <DIO_SetPinValue+0xc4>
 294:	88 0f       	add	r24, r24
 296:	99 1f       	adc	r25, r25
 298:	6a 95       	dec	r22
 29a:	e2 f7       	brpl	.-8      	; 0x294 <DIO_SetPinValue+0xc0>
 29c:	82 2b       	or	r24, r18
 29e:	82 bb       	out	0x12, r24	; 18
 2a0:	08 95       	ret
 2a2:	41 11       	cpse	r20, r1
 2a4:	0b c0       	rjmp	.+22     	; 0x2bc <DIO_SetPinValue+0xe8>
 2a6:	22 b3       	in	r18, 0x12	; 18
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <DIO_SetPinValue+0xde>
 2ae:	88 0f       	add	r24, r24
 2b0:	99 1f       	adc	r25, r25
 2b2:	6a 95       	dec	r22
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <DIO_SetPinValue+0xda>
 2b6:	80 95       	com	r24
 2b8:	82 23       	and	r24, r18
 2ba:	82 bb       	out	0x12, r24	; 18
 2bc:	08 95       	ret

Disassembly of section .text.DIO_SetPortDirection:

0000075a <DIO_SetPortDirection>:
			break ;
	}
}

void DIO_SetPortDirection (uint8_t PortNumber , uint8_t Direction) {
	switch(PortNumber) {
 75a:	81 30       	cpi	r24, 0x01	; 1
 75c:	79 f0       	breq	.+30     	; 0x77c <DIO_SetPortDirection+0x22>
 75e:	28 f0       	brcs	.+10     	; 0x76a <DIO_SetPortDirection+0x10>
 760:	82 30       	cpi	r24, 0x02	; 2
 762:	a9 f0       	breq	.+42     	; 0x78e <DIO_SetPortDirection+0x34>
 764:	83 30       	cpi	r24, 0x03	; 3
 766:	e1 f0       	breq	.+56     	; 0x7a0 <DIO_SetPortDirection+0x46>
 768:	08 95       	ret
		case portA : 
			if (Direction == OUTPUT) {
 76a:	61 30       	cpi	r22, 0x01	; 1
 76c:	19 f4       	brne	.+6      	; 0x774 <DIO_SetPortDirection+0x1a>
				DDRA_REG = 0xff ; 
 76e:	8f ef       	ldi	r24, 0xFF	; 255
 770:	8a bb       	out	0x1a, r24	; 26
 772:	08 95       	ret
			}
			else if (Direction == INPUT) {
 774:	61 11       	cpse	r22, r1
 776:	1c c0       	rjmp	.+56     	; 0x7b0 <DIO_SetPortDirection+0x56>
				DDRA_REG = 0x00 ; 
 778:	1a ba       	out	0x1a, r1	; 26
 77a:	08 95       	ret
			}
		break;
		
		case portB :
			if (Direction == OUTPUT) {
 77c:	61 30       	cpi	r22, 0x01	; 1
 77e:	19 f4       	brne	.+6      	; 0x786 <DIO_SetPortDirection+0x2c>
				DDRB_REG = 0xff ;
 780:	8f ef       	ldi	r24, 0xFF	; 255
 782:	87 bb       	out	0x17, r24	; 23
 784:	08 95       	ret
			}
			else if (Direction == INPUT) {
 786:	61 11       	cpse	r22, r1
 788:	13 c0       	rjmp	.+38     	; 0x7b0 <DIO_SetPortDirection+0x56>
				DDRB_REG = 0x00 ;
 78a:	17 ba       	out	0x17, r1	; 23
 78c:	08 95       	ret
			}
		break;
		
		case portC :
			if (Direction == OUTPUT) {
 78e:	61 30       	cpi	r22, 0x01	; 1
 790:	19 f4       	brne	.+6      	; 0x798 <DIO_SetPortDirection+0x3e>
				DDRC_REG = 0xff ;
 792:	8f ef       	ldi	r24, 0xFF	; 255
 794:	84 bb       	out	0x14, r24	; 20
 796:	08 95       	ret
			}
			else if (Direction == INPUT) {
 798:	61 11       	cpse	r22, r1
 79a:	0a c0       	rjmp	.+20     	; 0x7b0 <DIO_SetPortDirection+0x56>
				DDRC_REG = 0x00 ;
 79c:	14 ba       	out	0x14, r1	; 20
 79e:	08 95       	ret
			}	
		break;
		
		case portD :
			if (Direction == OUTPUT) {
 7a0:	61 30       	cpi	r22, 0x01	; 1
 7a2:	19 f4       	brne	.+6      	; 0x7aa <DIO_SetPortDirection+0x50>
				DDRD_REG = 0xff ;
 7a4:	8f ef       	ldi	r24, 0xFF	; 255
 7a6:	81 bb       	out	0x11, r24	; 17
 7a8:	08 95       	ret
			}
			else if (Direction == INPUT) {
 7aa:	61 11       	cpse	r22, r1
 7ac:	01 c0       	rjmp	.+2      	; 0x7b0 <DIO_SetPortDirection+0x56>
				DDRD_REG = 0x00 ;
 7ae:	11 ba       	out	0x11, r1	; 17
 7b0:	08 95       	ret

Disassembly of section .text.DIO_SetPortValue:

0000094a <DIO_SetPortValue>:
			break;
	}
}

void DIO_SetPortValue (uint8_t PortNumber , uint8_t Value) {
	switch(PortNumber) {
 94a:	81 30       	cpi	r24, 0x01	; 1
 94c:	41 f0       	breq	.+16     	; 0x95e <DIO_SetPortValue+0x14>
 94e:	28 f0       	brcs	.+10     	; 0x95a <DIO_SetPortValue+0x10>
 950:	82 30       	cpi	r24, 0x02	; 2
 952:	39 f0       	breq	.+14     	; 0x962 <DIO_SetPortValue+0x18>
 954:	83 30       	cpi	r24, 0x03	; 3
 956:	39 f0       	breq	.+14     	; 0x966 <DIO_SetPortValue+0x1c>
 958:	08 95       	ret
		case portA :
			PORTA_REG = Value ; 
 95a:	6b bb       	out	0x1b, r22	; 27
		break;
 95c:	08 95       	ret
		
		case portB :
			PORTB_REG = Value ; 
 95e:	68 bb       	out	0x18, r22	; 24
		break;
 960:	08 95       	ret
		
		case portC :
			PORTC_REG = Value ; 
 962:	65 bb       	out	0x15, r22	; 21
		break;
 964:	08 95       	ret
		
		case portD :
			PORTD_REG = Value ; 
 966:	62 bb       	out	0x12, r22	; 18
 968:	08 95       	ret

Disassembly of section .text.DIO_GetPinValue:

0000064e <DIO_GetPinValue>:
		case portC :
			TOGGLE_BIT(PORTC_REG , PinNumber) ;
			break ;
			
		case portD :
			TOGGLE_BIT(PORTD_REG , PinNumber) ;
 64e:	81 30       	cpi	r24, 0x01	; 1
 650:	79 f0       	breq	.+30     	; 0x670 <DIO_GetPinValue+0x22>
 652:	28 f0       	brcs	.+10     	; 0x65e <DIO_GetPinValue+0x10>
 654:	82 30       	cpi	r24, 0x02	; 2
 656:	a9 f0       	breq	.+42     	; 0x682 <DIO_GetPinValue+0x34>
 658:	83 30       	cpi	r24, 0x03	; 3
 65a:	e1 f0       	breq	.+56     	; 0x694 <DIO_GetPinValue+0x46>
 65c:	24 c0       	rjmp	.+72     	; 0x6a6 <DIO_GetPinValue+0x58>
 65e:	89 b3       	in	r24, 0x19	; 25
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	02 c0       	rjmp	.+4      	; 0x668 <DIO_GetPinValue+0x1a>
 664:	95 95       	asr	r25
 666:	87 95       	ror	r24
 668:	6a 95       	dec	r22
 66a:	e2 f7       	brpl	.-8      	; 0x664 <DIO_GetPinValue+0x16>
 66c:	81 70       	andi	r24, 0x01	; 1
 66e:	08 95       	ret
 670:	86 b3       	in	r24, 0x16	; 22
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	02 c0       	rjmp	.+4      	; 0x67a <DIO_GetPinValue+0x2c>
 676:	95 95       	asr	r25
 678:	87 95       	ror	r24
 67a:	6a 95       	dec	r22
 67c:	e2 f7       	brpl	.-8      	; 0x676 <DIO_GetPinValue+0x28>
 67e:	81 70       	andi	r24, 0x01	; 1
 680:	08 95       	ret
 682:	83 b3       	in	r24, 0x13	; 19
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	02 c0       	rjmp	.+4      	; 0x68c <DIO_GetPinValue+0x3e>
 688:	95 95       	asr	r25
 68a:	87 95       	ror	r24
 68c:	6a 95       	dec	r22
 68e:	e2 f7       	brpl	.-8      	; 0x688 <DIO_GetPinValue+0x3a>
 690:	81 70       	andi	r24, 0x01	; 1
 692:	08 95       	ret
 694:	80 b3       	in	r24, 0x10	; 16
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	02 c0       	rjmp	.+4      	; 0x69e <DIO_GetPinValue+0x50>
 69a:	95 95       	asr	r25
 69c:	87 95       	ror	r24
 69e:	6a 95       	dec	r22
 6a0:	e2 f7       	brpl	.-8      	; 0x69a <DIO_GetPinValue+0x4c>
 6a2:	81 70       	andi	r24, 0x01	; 1
 6a4:	08 95       	ret
 6a6:	80 e0       	ldi	r24, 0x00	; 0
 6a8:	08 95       	ret

Disassembly of section .text.__vector_10:

000007b2 <__vector_10>:
uint8_t Timer2_OV_flag()
{
	while(BIT_IS_CLEAR(TIFR,TOV2));
	SET_BIT(TIFR,TOV2);
	return 1;
}
 7b2:	1f 92       	push	r1
 7b4:	0f 92       	push	r0
 7b6:	0f b6       	in	r0, 0x3f	; 63
 7b8:	0f 92       	push	r0
 7ba:	11 24       	eor	r1, r1
 7bc:	2f 93       	push	r18
 7be:	3f 93       	push	r19
 7c0:	4f 93       	push	r20
 7c2:	5f 93       	push	r21
 7c4:	6f 93       	push	r22
 7c6:	7f 93       	push	r23
 7c8:	8f 93       	push	r24
 7ca:	9f 93       	push	r25
 7cc:	af 93       	push	r26
 7ce:	bf 93       	push	r27
 7d0:	ef 93       	push	r30
 7d2:	ff 93       	push	r31
 7d4:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <g_callBackPtrTimer0CTC>
 7d8:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <g_callBackPtrTimer0CTC+0x1>
 7dc:	09 95       	icall
 7de:	ff 91       	pop	r31
 7e0:	ef 91       	pop	r30
 7e2:	bf 91       	pop	r27
 7e4:	af 91       	pop	r26
 7e6:	9f 91       	pop	r25
 7e8:	8f 91       	pop	r24
 7ea:	7f 91       	pop	r23
 7ec:	6f 91       	pop	r22
 7ee:	5f 91       	pop	r21
 7f0:	4f 91       	pop	r20
 7f2:	3f 91       	pop	r19
 7f4:	2f 91       	pop	r18
 7f6:	0f 90       	pop	r0
 7f8:	0f be       	out	0x3f, r0	; 63
 7fa:	0f 90       	pop	r0
 7fc:	1f 90       	pop	r1
 7fe:	18 95       	reti

Disassembly of section .text.__vector_4:

00000800 <__vector_4>:
 800:	1f 92       	push	r1
 802:	0f 92       	push	r0
 804:	0f b6       	in	r0, 0x3f	; 63
 806:	0f 92       	push	r0
 808:	11 24       	eor	r1, r1
 80a:	2f 93       	push	r18
 80c:	3f 93       	push	r19
 80e:	4f 93       	push	r20
 810:	5f 93       	push	r21
 812:	6f 93       	push	r22
 814:	7f 93       	push	r23
 816:	8f 93       	push	r24
 818:	9f 93       	push	r25
 81a:	af 93       	push	r26
 81c:	bf 93       	push	r27
 81e:	ef 93       	push	r30
 820:	ff 93       	push	r31
 822:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <g_callBackPtrTimer2CTC>
 826:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <g_callBackPtrTimer2CTC+0x1>
 82a:	09 95       	icall
 82c:	ff 91       	pop	r31
 82e:	ef 91       	pop	r30
 830:	bf 91       	pop	r27
 832:	af 91       	pop	r26
 834:	9f 91       	pop	r25
 836:	8f 91       	pop	r24
 838:	7f 91       	pop	r23
 83a:	6f 91       	pop	r22
 83c:	5f 91       	pop	r21
 83e:	4f 91       	pop	r20
 840:	3f 91       	pop	r19
 842:	2f 91       	pop	r18
 844:	0f 90       	pop	r0
 846:	0f be       	out	0x3f, r0	; 63
 848:	0f 90       	pop	r0
 84a:	1f 90       	pop	r1
 84c:	18 95       	reti

Disassembly of section .text.__vector_7:

0000084e <__vector_7>:
 84e:	1f 92       	push	r1
 850:	0f 92       	push	r0
 852:	0f b6       	in	r0, 0x3f	; 63
 854:	0f 92       	push	r0
 856:	11 24       	eor	r1, r1
 858:	2f 93       	push	r18
 85a:	3f 93       	push	r19
 85c:	4f 93       	push	r20
 85e:	5f 93       	push	r21
 860:	6f 93       	push	r22
 862:	7f 93       	push	r23
 864:	8f 93       	push	r24
 866:	9f 93       	push	r25
 868:	af 93       	push	r26
 86a:	bf 93       	push	r27
 86c:	ef 93       	push	r30
 86e:	ff 93       	push	r31
 870:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <g_callBackPtrTimer1COMPA>
 874:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <g_callBackPtrTimer1COMPA+0x1>
 878:	09 95       	icall
 87a:	ff 91       	pop	r31
 87c:	ef 91       	pop	r30
 87e:	bf 91       	pop	r27
 880:	af 91       	pop	r26
 882:	9f 91       	pop	r25
 884:	8f 91       	pop	r24
 886:	7f 91       	pop	r23
 888:	6f 91       	pop	r22
 88a:	5f 91       	pop	r21
 88c:	4f 91       	pop	r20
 88e:	3f 91       	pop	r19
 890:	2f 91       	pop	r18
 892:	0f 90       	pop	r0
 894:	0f be       	out	0x3f, r0	; 63
 896:	0f 90       	pop	r0
 898:	1f 90       	pop	r1
 89a:	18 95       	reti

Disassembly of section .text.Timer_start:

000002be <Timer_start>:
 2be:	fc 01       	movw	r30, r24
 2c0:	80 81       	ld	r24, Z
 2c2:	81 30       	cpi	r24, 0x01	; 1
 2c4:	c1 f1       	breq	.+112    	; 0x336 <Timer_start+0x78>
 2c6:	18 f0       	brcs	.+6      	; 0x2ce <Timer_start+0x10>
 2c8:	82 30       	cpi	r24, 0x02	; 2
 2ca:	e1 f0       	breq	.+56     	; 0x304 <Timer_start+0x46>
 2cc:	08 95       	ret
 2ce:	93 b7       	in	r25, 0x33	; 51
 2d0:	81 81       	ldd	r24, Z+1	; 0x01
 2d2:	89 2b       	or	r24, r25
 2d4:	83 bf       	out	0x33, r24	; 51
 2d6:	93 b7       	in	r25, 0x33	; 51
 2d8:	82 81       	ldd	r24, Z+2	; 0x02
 2da:	87 70       	andi	r24, 0x07	; 7
 2dc:	89 2b       	or	r24, r25
 2de:	83 bf       	out	0x33, r24	; 51
 2e0:	83 81       	ldd	r24, Z+3	; 0x03
 2e2:	82 bf       	out	0x32, r24	; 50
 2e4:	85 81       	ldd	r24, Z+5	; 0x05
 2e6:	8c bf       	out	0x3c, r24	; 60
 2e8:	8f b7       	in	r24, 0x3f	; 63
 2ea:	80 68       	ori	r24, 0x80	; 128
 2ec:	8f bf       	out	0x3f, r24	; 63
 2ee:	03 b6       	in	r0, 0x33	; 51
 2f0:	03 fe       	sbrs	r0, 3
 2f2:	04 c0       	rjmp	.+8      	; 0x2fc <Timer_start+0x3e>
 2f4:	89 b7       	in	r24, 0x39	; 57
 2f6:	82 60       	ori	r24, 0x02	; 2
 2f8:	89 bf       	out	0x39, r24	; 57
 2fa:	08 95       	ret
 2fc:	89 b7       	in	r24, 0x39	; 57
 2fe:	81 60       	ori	r24, 0x01	; 1
 300:	89 bf       	out	0x39, r24	; 57
 302:	08 95       	ret
 304:	81 81       	ldd	r24, Z+1	; 0x01
 306:	85 bd       	out	0x25, r24	; 37
 308:	95 b5       	in	r25, 0x25	; 37
 30a:	82 81       	ldd	r24, Z+2	; 0x02
 30c:	87 70       	andi	r24, 0x07	; 7
 30e:	89 2b       	or	r24, r25
 310:	85 bd       	out	0x25, r24	; 37
 312:	83 81       	ldd	r24, Z+3	; 0x03
 314:	84 bd       	out	0x24, r24	; 36
 316:	85 81       	ldd	r24, Z+5	; 0x05
 318:	83 bd       	out	0x23, r24	; 35
 31a:	8f b7       	in	r24, 0x3f	; 63
 31c:	80 68       	ori	r24, 0x80	; 128
 31e:	8f bf       	out	0x3f, r24	; 63
 320:	05 b4       	in	r0, 0x25	; 37
 322:	03 fe       	sbrs	r0, 3
 324:	04 c0       	rjmp	.+8      	; 0x32e <Timer_start+0x70>
 326:	89 b7       	in	r24, 0x39	; 57
 328:	80 68       	ori	r24, 0x80	; 128
 32a:	89 bf       	out	0x39, r24	; 57
 32c:	08 95       	ret
 32e:	89 b7       	in	r24, 0x39	; 57
 330:	80 64       	ori	r24, 0x40	; 64
 332:	89 bf       	out	0x39, r24	; 57
 334:	08 95       	ret
 336:	83 81       	ldd	r24, Z+3	; 0x03
 338:	8c b9       	out	0x0c, r24	; 12
 33a:	81 81       	ldd	r24, Z+1	; 0x01
 33c:	80 38       	cpi	r24, 0x80	; 128
 33e:	69 f4       	brne	.+26     	; 0x35a <Timer_start+0x9c>
 340:	8f b7       	in	r24, 0x3f	; 63
 342:	80 68       	ori	r24, 0x80	; 128
 344:	8f bf       	out	0x3f, r24	; 63
 346:	89 b7       	in	r24, 0x39	; 57
 348:	84 60       	ori	r24, 0x04	; 4
 34a:	89 bf       	out	0x39, r24	; 57
 34c:	8c e0       	ldi	r24, 0x0C	; 12
 34e:	8f bd       	out	0x2f, r24	; 47
 350:	9e b5       	in	r25, 0x2e	; 46
 352:	82 81       	ldd	r24, Z+2	; 0x02
 354:	89 2b       	or	r24, r25
 356:	8e bd       	out	0x2e, r24	; 46
 358:	08 95       	ret
 35a:	88 38       	cpi	r24, 0x88	; 136
 35c:	19 f5       	brne	.+70     	; 0x3a4 <Timer_start+0xe6>
 35e:	8c e0       	ldi	r24, 0x0C	; 12
 360:	8f bd       	out	0x2f, r24	; 47
 362:	8e b5       	in	r24, 0x2e	; 46
 364:	88 60       	ori	r24, 0x08	; 8
 366:	8e bd       	out	0x2e, r24	; 46
 368:	87 81       	ldd	r24, Z+7	; 0x07
 36a:	81 11       	cpse	r24, r1
 36c:	0b c0       	rjmp	.+22     	; 0x384 <Timer_start+0xc6>
 36e:	8f b7       	in	r24, 0x3f	; 63
 370:	80 68       	ori	r24, 0x80	; 128
 372:	8f bf       	out	0x3f, r24	; 63
 374:	89 b7       	in	r24, 0x39	; 57
 376:	80 61       	ori	r24, 0x10	; 16
 378:	89 bf       	out	0x39, r24	; 57
 37a:	85 81       	ldd	r24, Z+5	; 0x05
 37c:	8a bd       	out	0x2a, r24	; 42
 37e:	86 81       	ldd	r24, Z+6	; 0x06
 380:	8b bd       	out	0x2b, r24	; 43
 382:	0c c0       	rjmp	.+24     	; 0x39c <Timer_start+0xde>
 384:	81 30       	cpi	r24, 0x01	; 1
 386:	51 f4       	brne	.+20     	; 0x39c <Timer_start+0xde>
 388:	8f b7       	in	r24, 0x3f	; 63
 38a:	80 68       	ori	r24, 0x80	; 128
 38c:	8f bf       	out	0x3f, r24	; 63
 38e:	89 b7       	in	r24, 0x39	; 57
 390:	88 60       	ori	r24, 0x08	; 8
 392:	89 bf       	out	0x39, r24	; 57
 394:	85 81       	ldd	r24, Z+5	; 0x05
 396:	8a bd       	out	0x2a, r24	; 42
 398:	86 81       	ldd	r24, Z+6	; 0x06
 39a:	8b bd       	out	0x2b, r24	; 43
 39c:	9e b5       	in	r25, 0x2e	; 46
 39e:	82 81       	ldd	r24, Z+2	; 0x02
 3a0:	89 2b       	or	r24, r25
 3a2:	8e bd       	out	0x2e, r24	; 46
 3a4:	08 95       	ret

Disassembly of section .text.Timer1A_CTC_flag:

000009a0 <Timer1A_CTC_flag>:


uint8_t Timer1A_CTC_flag()
{
	while(BIT_IS_CLEAR(TIFR,OCF1A));
 9a0:	08 b6       	in	r0, 0x38	; 56
 9a2:	04 fe       	sbrs	r0, 4
 9a4:	fd cf       	rjmp	.-6      	; 0x9a0 <Timer1A_CTC_flag>
	SET_BIT(TIFR,OCF1A);
 9a6:	88 b7       	in	r24, 0x38	; 56
 9a8:	80 61       	ori	r24, 0x10	; 16
 9aa:	88 bf       	out	0x38, r24	; 56
	return 1;
}
 9ac:	81 e0       	ldi	r24, 0x01	; 1
 9ae:	08 95       	ret
